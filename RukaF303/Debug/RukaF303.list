
RukaF303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058d4  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005a5c  08005a5c  00006a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a94  08005a94  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005a94  08005a94  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a94  08005a94  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a94  08005a94  00006a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a98  08005a98  00006a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005a9c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          000001c0  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f3a3  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000204d  00000000  00000000  000163df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d08  00000000  00000000  00018430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3d  00000000  00000000  00019138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b67a  00000000  00000000  00019b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b12  00000000  00000000  000351ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4cf3  00000000  00000000  00045d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ea9f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037f8  00000000  00000000  000eaa38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000ee230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a44 	.word	0x08005a44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005a44 	.word	0x08005a44

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <delay_us>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */
void delay_us(uint16_t us) {
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // set the counter value a 0
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <delay_us+0x30>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us)
 8000a66:	bf00      	nop
 8000a68:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <delay_us+0x30>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d3f9      	bcc.n	8000a68 <delay_us+0x14>
		;  // wait for the counter to reach the us input in the parameter
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20000028 	.word	0x20000028

08000a88 <rotate_joint_1>:

//dir = 0 -> arm rotates clockwise
//dir = 1 -> arm rotates counterclockwise
int rotate_joint_1(float ang, uint8_t dir) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a92:	4603      	mov	r3, r0
 8000a94:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, dir);
 8000a96:	78fb      	ldrb	r3, [r7, #3]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa2:	f001 fd6d 	bl	8002580 <HAL_GPIO_WritePin>
	int microsteps = (int) ang * JOINT1_REDUCTION * MICROSTEPS_FOR_DEG;
 8000aa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aae:	ee17 0a90 	vmov	r0, s15
 8000ab2:	f7ff fcdb 	bl	800046c <__aeabi_i2d>
 8000ab6:	a30e      	add	r3, pc, #56	@ (adr r3, 8000af0 <rotate_joint_1+0x68>)
 8000ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000abc:	f7ff fd40 	bl	8000540 <__aeabi_dmul>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	4610      	mov	r0, r2
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	a30b      	add	r3, pc, #44	@ (adr r3, 8000af8 <rotate_joint_1+0x70>)
 8000aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ace:	f7ff fd37 	bl	8000540 <__aeabi_dmul>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f7ff ff43 	bl	8000964 <__aeabi_d2iz>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	60fb      	str	r3, [r7, #12]
	return microsteps;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	f3af 8000 	nop.w
 8000af0:	5c28f5c3 	.word	0x5c28f5c3
 8000af4:	4007c28f 	.word	0x4007c28f
 8000af8:	5c28f5c3 	.word	0x5c28f5c3
 8000afc:	4011c28f 	.word	0x4011c28f

08000b00 <rotate_joint_2>:

//dir = 1 -> arm goes up
//dir = 0 -> arm goes down
int rotate_joint_2(float ang, uint8_t dir) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, dir);
 8000b0e:	78fb      	ldrb	r3, [r7, #3]
 8000b10:	461a      	mov	r2, r3
 8000b12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b1a:	f001 fd31 	bl	8002580 <HAL_GPIO_WritePin>
	int microsteps = (int) ang * JOINT2_REDUCTION * MICROSTEPS_FOR_DEG;
 8000b1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b26:	ee17 2a90 	vmov	r2, s15
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	4413      	add	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fc9a 	bl	800046c <__aeabi_i2d>
 8000b38:	a309      	add	r3, pc, #36	@ (adr r3, 8000b60 <rotate_joint_2+0x60>)
 8000b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b3e:	f7ff fcff 	bl	8000540 <__aeabi_dmul>
 8000b42:	4602      	mov	r2, r0
 8000b44:	460b      	mov	r3, r1
 8000b46:	4610      	mov	r0, r2
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f7ff ff0b 	bl	8000964 <__aeabi_d2iz>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	60fb      	str	r3, [r7, #12]
	return microsteps;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	f3af 8000 	nop.w
 8000b60:	5c28f5c3 	.word	0x5c28f5c3
 8000b64:	4011c28f 	.word	0x4011c28f

08000b68 <rotate_joint_3>:

//dir = 1 -> arm goes down
//dir = 0 -> arm goes up
int rotate_joint_3(float ang, uint8_t dir) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b72:	4603      	mov	r3, r0
 8000b74:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DIR3_GPIO_Port, DIR3_Pin, dir == 1 ? 0 : 1);
 8000b76:	78fb      	ldrb	r3, [r7, #3]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	bf14      	ite	ne
 8000b7c:	2301      	movne	r3, #1
 8000b7e:	2300      	moveq	r3, #0
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	461a      	mov	r2, r3
 8000b84:	2120      	movs	r1, #32
 8000b86:	4818      	ldr	r0, [pc, #96]	@ (8000be8 <rotate_joint_3+0x80>)
 8000b88:	f001 fcfa 	bl	8002580 <HAL_GPIO_WritePin>
	int microsteps = (int) ang * JOINT3_REDUCTION * MICROSTEPS_FOR_DEG;
 8000b8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b94:	ee17 0a90 	vmov	r0, s15
 8000b98:	f7ff fc68 	bl	800046c <__aeabi_i2d>
 8000b9c:	a30e      	add	r3, pc, #56	@ (adr r3, 8000bd8 <rotate_joint_3+0x70>)
 8000b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba2:	f7ff fccd 	bl	8000540 <__aeabi_dmul>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	460b      	mov	r3, r1
 8000baa:	4610      	mov	r0, r2
 8000bac:	4619      	mov	r1, r3
 8000bae:	a30c      	add	r3, pc, #48	@ (adr r3, 8000be0 <rotate_joint_3+0x78>)
 8000bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb4:	f7ff fcc4 	bl	8000540 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4610      	mov	r0, r2
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f7ff fed0 	bl	8000964 <__aeabi_d2iz>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	60fb      	str	r3, [r7, #12]
	return microsteps;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	f3af 8000 	nop.w
 8000bd8:	66666666 	.word	0x66666666
 8000bdc:	40346666 	.word	0x40346666
 8000be0:	5c28f5c3 	.word	0x5c28f5c3
 8000be4:	4011c28f 	.word	0x4011c28f
 8000be8:	48000400 	.word	0x48000400
 8000bec:	00000000 	.word	0x00000000

08000bf0 <rotate_diff_joint>:
}

//dir4 = 0 -> dize se ruka
//dir4 = 1 -> spusta se ruka
void rotate_diff_joint(float ang4, float ang5, uint8_t dir4, uint8_t dir5,
		int *nema_4, int *nema_5) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	@ 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	ed87 0a05 	vstr	s0, [r7, #20]
 8000bfa:	edc7 0a04 	vstr	s1, [r7, #16]
 8000bfe:	60ba      	str	r2, [r7, #8]
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	4603      	mov	r3, r0
 8000c04:	73fb      	strb	r3, [r7, #15]
 8000c06:	460b      	mov	r3, r1
 8000c08:	73bb      	strb	r3, [r7, #14]

	int microsteps4 = (int) (ang4 * JOINT4_REDUCTION * MICROSTEPS_FOR_DEG);
 8000c0a:	6978      	ldr	r0, [r7, #20]
 8000c0c:	f7ff fc40 	bl	8000490 <__aeabi_f2d>
 8000c10:	a346      	add	r3, pc, #280	@ (adr r3, 8000d2c <rotate_diff_joint+0x13c>)
 8000c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c16:	f7ff fc93 	bl	8000540 <__aeabi_dmul>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	4610      	mov	r0, r2
 8000c20:	4619      	mov	r1, r3
 8000c22:	f7ff fe9f 	bl	8000964 <__aeabi_d2iz>
 8000c26:	4603      	mov	r3, r0
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
	int microsteps5 = (int) (ang5 * JOINT5_REDUCTION * MICROSTEPS_FOR_DEG);
 8000c2a:	6938      	ldr	r0, [r7, #16]
 8000c2c:	f7ff fc30 	bl	8000490 <__aeabi_f2d>
 8000c30:	a340      	add	r3, pc, #256	@ (adr r3, 8000d34 <rotate_diff_joint+0x144>)
 8000c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c36:	f7ff fc83 	bl	8000540 <__aeabi_dmul>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	4610      	mov	r0, r2
 8000c40:	4619      	mov	r1, r3
 8000c42:	a33a      	add	r3, pc, #232	@ (adr r3, 8000d2c <rotate_diff_joint+0x13c>)
 8000c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c48:	f7ff fc7a 	bl	8000540 <__aeabi_dmul>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	460b      	mov	r3, r1
 8000c50:	4610      	mov	r0, r2
 8000c52:	4619      	mov	r1, r3
 8000c54:	f7ff fe86 	bl	8000964 <__aeabi_d2iz>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	623b      	str	r3, [r7, #32]

	int sign4 = (dir4 == 0 ? 1 : -1);
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <rotate_diff_joint+0x76>
 8000c62:	2301      	movs	r3, #1
 8000c64:	e001      	b.n	8000c6a <rotate_diff_joint+0x7a>
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	61fb      	str	r3, [r7, #28]
	int sign5 = (dir5 == 0 ? 1 : -1);
 8000c6c:	7bbb      	ldrb	r3, [r7, #14]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <rotate_diff_joint+0x86>
 8000c72:	2301      	movs	r3, #1
 8000c74:	e001      	b.n	8000c7a <rotate_diff_joint+0x8a>
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	61bb      	str	r3, [r7, #24]


	*nema_4 = microsteps4 * sign4 + microsteps5 * sign5;
 8000c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c7e:	69fa      	ldr	r2, [r7, #28]
 8000c80:	fb03 f202 	mul.w	r2, r3, r2
 8000c84:	6a3b      	ldr	r3, [r7, #32]
 8000c86:	69b9      	ldr	r1, [r7, #24]
 8000c88:	fb01 f303 	mul.w	r3, r1, r3
 8000c8c:	441a      	add	r2, r3
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	601a      	str	r2, [r3, #0]
	*nema_5 = -microsteps4 * sign4 + microsteps5 * sign5;
 8000c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c94:	425b      	negs	r3, r3
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	fb03 f202 	mul.w	r2, r3, r2
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	69b9      	ldr	r1, [r7, #24]
 8000ca0:	fb01 f303 	mul.w	r3, r1, r3
 8000ca4:	441a      	add	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	601a      	str	r2, [r3, #0]

	jointDirections.d4 = *nema_4 < 0 ? -1 : 1;
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	da02      	bge.n	8000cb8 <rotate_diff_joint+0xc8>
 8000cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb6:	e000      	b.n	8000cba <rotate_diff_joint+0xca>
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <rotate_diff_joint+0x138>)
 8000cbc:	70da      	strb	r2, [r3, #3]
	jointDirections.d5 = *nema_5 < 0 ? 1 : -1;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	da01      	bge.n	8000cca <rotate_diff_joint+0xda>
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	e001      	b.n	8000cce <rotate_diff_joint+0xde>
 8000cca:	f04f 32ff 	mov.w	r2, #4294967295
 8000cce:	4b16      	ldr	r3, [pc, #88]	@ (8000d28 <rotate_diff_joint+0x138>)
 8000cd0:	711a      	strb	r2, [r3, #4]

	HAL_GPIO_WritePin(DIR4_GPIO_Port, DIR4_Pin, *nema_4 < 0 ? 1 : 0);
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	0fdb      	lsrs	r3, r3, #31
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	461a      	mov	r2, r3
 8000cdc:	2120      	movs	r1, #32
 8000cde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce2:	f001 fc4d 	bl	8002580 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR5_GPIO_Port, DIR5_Pin, *nema_5 < 0 ? 1 : 0);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	0fdb      	lsrs	r3, r3, #31
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	461a      	mov	r2, r3
 8000cf0:	2180      	movs	r1, #128	@ 0x80
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf6:	f001 fc43 	bl	8002580 <HAL_GPIO_WritePin>

	*nema_4 = abs(*nema_4);
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000d02:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	601a      	str	r2, [r3, #0]
	*nema_5 = abs(*nema_5);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000d12:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	601a      	str	r2, [r3, #0]
}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	@ 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	f3af 8000 	nop.w
 8000d28:	20000148 	.word	0x20000148
 8000d2c:	5c28f5c3 	.word	0x5c28f5c3
 8000d30:	4011c28f 	.word	0x4011c28f
 8000d34:	851eb852 	.word	0x851eb852
 8000d38:	3ff451eb 	.word	0x3ff451eb

08000d3c <calculate_times>:

void calculate_times(sMicroteps *sMicrosteps, sMicStepTim *sMictoStepsTime) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
	if (sMicrosteps->ang1 != 0) {
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d01b      	beq.n	8000d86 <calculate_times+0x4a>
		sMictoStepsTime->ms1 = (int)(((float)sMicrosteps->ang2 / (float)sMicrosteps->ang1)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	ee07 3a90 	vmov	s15, r3
 8000d56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	ee07 3a90 	vmov	s15, r3
 8000d62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
				* (float)sMictoStepsTime->ms2);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	ee07 3a90 	vmov	s15, r3
 8000d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d76:	ee67 7a27 	vmul.f32	s15, s14, s15
		sMictoStepsTime->ms1 = (int)(((float)sMicrosteps->ang2 / (float)sMicrosteps->ang1)
 8000d7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d7e:	ee17 2a90 	vmov	r2, s15
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	601a      	str	r2, [r3, #0]
	}
	if (sMicrosteps->ang3 != 0) {
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d01b      	beq.n	8000dc6 <calculate_times+0x8a>
		sMictoStepsTime->ms3 = (int)((((float)sMicrosteps->ang2) / ((float)sMicrosteps->ang3))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	ee07 3a90 	vmov	s15, r3
 8000d96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	ee07 3a90 	vmov	s15, r3
 8000da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
				* (float)sMictoStepsTime->ms2);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	ee07 3a90 	vmov	s15, r3
 8000db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000db6:	ee67 7a27 	vmul.f32	s15, s14, s15
		sMictoStepsTime->ms3 = (int)((((float)sMicrosteps->ang2) / ((float)sMicrosteps->ang3))
 8000dba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dbe:	ee17 2a90 	vmov	r2, s15
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	609a      	str	r2, [r3, #8]
	}
	if (sMicrosteps->ang4 != 0) {
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d01b      	beq.n	8000e06 <calculate_times+0xca>
		sMictoStepsTime->ms4 = (int)(((float)sMicrosteps->ang2 / (float)sMicrosteps->ang4)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	ee07 3a90 	vmov	s15, r3
 8000dd6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	ee07 3a90 	vmov	s15, r3
 8000de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
				* (float)sMictoStepsTime->ms2);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	ee07 3a90 	vmov	s15, r3
 8000df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000df6:	ee67 7a27 	vmul.f32	s15, s14, s15
		sMictoStepsTime->ms4 = (int)(((float)sMicrosteps->ang2 / (float)sMicrosteps->ang4)
 8000dfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dfe:	ee17 2a90 	vmov	r2, s15
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	60da      	str	r2, [r3, #12]
	}
	if (sMicrosteps->ang5 != 0) {
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	691b      	ldr	r3, [r3, #16]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d01b      	beq.n	8000e46 <calculate_times+0x10a>
		sMictoStepsTime->ms5 = (int)(((float)sMicrosteps->ang2 / (float)sMicrosteps->ang5)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	ee07 3a90 	vmov	s15, r3
 8000e16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	ee07 3a90 	vmov	s15, r3
 8000e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
				* (float)sMictoStepsTime->ms2);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	ee07 3a90 	vmov	s15, r3
 8000e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e36:	ee67 7a27 	vmul.f32	s15, s14, s15
		sMictoStepsTime->ms5 = (int)(((float)sMicrosteps->ang2 / (float)sMicrosteps->ang5)
 8000e3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e3e:	ee17 2a90 	vmov	r2, s15
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	611a      	str	r2, [r3, #16]
	}
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	0000      	movs	r0, r0
 8000e54:	0000      	movs	r0, r0
	...

08000e58 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e58:	b5b0      	push	{r4, r5, r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e5c:	f001 f82a 	bl	8001eb4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e60:	f000 faa0 	bl	80013a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e64:	f000 fbb2 	bl	80015cc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000e68:	f000 fb80 	bl	800156c <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8000e6c:	f000 faf4 	bl	8001458 <MX_TIM1_Init>
	MX_TIM6_Init();
 8000e70:	f000 fb46 	bl	8001500 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */

	sElapsedTime.tim1 = 0;
 8000e74:	4b9c      	ldr	r3, [pc, #624]	@ (80010e8 <main+0x290>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
	sElapsedTime.tim2 = 0;
 8000e7a:	4b9b      	ldr	r3, [pc, #620]	@ (80010e8 <main+0x290>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
	sElapsedTime.tim3 = 0;
 8000e80:	4b99      	ldr	r3, [pc, #612]	@ (80010e8 <main+0x290>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
	sElapsedTime.tim4 = 0;
 8000e86:	4b98      	ldr	r3, [pc, #608]	@ (80010e8 <main+0x290>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
	sElapsedTime.tim5 = 0;
 8000e8c:	4b96      	ldr	r3, [pc, #600]	@ (80010e8 <main+0x290>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]

	sUpDwn.up_dn1 = 0;
 8000e92:	4b96      	ldr	r3, [pc, #600]	@ (80010ec <main+0x294>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
	sUpDwn.up_dn2 = 0;
 8000e98:	4b94      	ldr	r3, [pc, #592]	@ (80010ec <main+0x294>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	705a      	strb	r2, [r3, #1]
	sUpDwn.up_dn3 = 0;
 8000e9e:	4b93      	ldr	r3, [pc, #588]	@ (80010ec <main+0x294>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	709a      	strb	r2, [r3, #2]
	sUpDwn.up_dn4 = 0;
 8000ea4:	4b91      	ldr	r3, [pc, #580]	@ (80010ec <main+0x294>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	70da      	strb	r2, [r3, #3]
	sUpDwn.up_dn5 = 0;
 8000eaa:	4b90      	ldr	r3, [pc, #576]	@ (80010ec <main+0x294>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	711a      	strb	r2, [r3, #4]

	sMictoStepsTime.ms1 = 80;
 8000eb0:	4b8f      	ldr	r3, [pc, #572]	@ (80010f0 <main+0x298>)
 8000eb2:	2250      	movs	r2, #80	@ 0x50
 8000eb4:	601a      	str	r2, [r3, #0]
	sMictoStepsTime.ms2 = 20;
 8000eb6:	4b8e      	ldr	r3, [pc, #568]	@ (80010f0 <main+0x298>)
 8000eb8:	2214      	movs	r2, #20
 8000eba:	605a      	str	r2, [r3, #4]
	sMictoStepsTime.ms3 = 20;
 8000ebc:	4b8c      	ldr	r3, [pc, #560]	@ (80010f0 <main+0x298>)
 8000ebe:	2214      	movs	r2, #20
 8000ec0:	609a      	str	r2, [r3, #8]
	sMictoStepsTime.ms4 = 120;
 8000ec2:	4b8b      	ldr	r3, [pc, #556]	@ (80010f0 <main+0x298>)
 8000ec4:	2278      	movs	r2, #120	@ 0x78
 8000ec6:	60da      	str	r2, [r3, #12]
	sMictoStepsTime.ms5 = 120;
 8000ec8:	4b89      	ldr	r3, [pc, #548]	@ (80010f0 <main+0x298>)
 8000eca:	2278      	movs	r2, #120	@ 0x78
 8000ecc:	611a      	str	r2, [r3, #16]

	jointAngles.j1 = 0.1;
 8000ece:	4b89      	ldr	r3, [pc, #548]	@ (80010f4 <main+0x29c>)
 8000ed0:	4a89      	ldr	r2, [pc, #548]	@ (80010f8 <main+0x2a0>)
 8000ed2:	601a      	str	r2, [r3, #0]
	jointAngles.j2 = 1.2;
 8000ed4:	4b87      	ldr	r3, [pc, #540]	@ (80010f4 <main+0x29c>)
 8000ed6:	4a89      	ldr	r2, [pc, #548]	@ (80010fc <main+0x2a4>)
 8000ed8:	605a      	str	r2, [r3, #4]
	jointAngles.j3 = 3.4;
 8000eda:	4b86      	ldr	r3, [pc, #536]	@ (80010f4 <main+0x29c>)
 8000edc:	4a88      	ldr	r2, [pc, #544]	@ (8001100 <main+0x2a8>)
 8000ede:	609a      	str	r2, [r3, #8]
	jointAngles.j4 = 4.5;
 8000ee0:	4b84      	ldr	r3, [pc, #528]	@ (80010f4 <main+0x29c>)
 8000ee2:	4a88      	ldr	r2, [pc, #544]	@ (8001104 <main+0x2ac>)
 8000ee4:	60da      	str	r2, [r3, #12]
	jointAngles.j5 = 6.7;
 8000ee6:	4b83      	ldr	r3, [pc, #524]	@ (80010f4 <main+0x29c>)
 8000ee8:	4a87      	ldr	r2, [pc, #540]	@ (8001108 <main+0x2b0>)
 8000eea:	611a      	str	r2, [r3, #16]

	jointDirections.d1 = 1;
 8000eec:	4b87      	ldr	r3, [pc, #540]	@ (800110c <main+0x2b4>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
	jointDirections.d2 = 1;
 8000ef2:	4b86      	ldr	r3, [pc, #536]	@ (800110c <main+0x2b4>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	705a      	strb	r2, [r3, #1]
	jointDirections.d3 = 1;
 8000ef8:	4b84      	ldr	r3, [pc, #528]	@ (800110c <main+0x2b4>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	709a      	strb	r2, [r3, #2]
	jointDirections.d4 = 1;
 8000efe:	4b83      	ldr	r3, [pc, #524]	@ (800110c <main+0x2b4>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	70da      	strb	r2, [r3, #3]
	jointDirections.d5 = 1;
 8000f04:	4b81      	ldr	r3, [pc, #516]	@ (800110c <main+0x2b4>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	711a      	strb	r2, [r3, #4]

	HAL_GPIO_WritePin(STEP1_GPIO_Port, STEP1_Pin, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	4880      	ldr	r0, [pc, #512]	@ (8001110 <main+0x2b8>)
 8000f10:	f001 fb36 	bl	8002580 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP2_GPIO_Port, STEP2_Pin, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f1e:	f001 fb2f 	bl	8002580 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP3_GPIO_Port, STEP3_Pin, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2110      	movs	r1, #16
 8000f26:	487a      	ldr	r0, [pc, #488]	@ (8001110 <main+0x2b8>)
 8000f28:	f001 fb2a 	bl	8002580 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP4_GPIO_Port, STEP4_Pin, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2110      	movs	r1, #16
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f34:	f001 fb24 	bl	8002580 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP5_GPIO_Port, STEP5_Pin, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2140      	movs	r1, #64	@ 0x40
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f40:	f001 fb1e 	bl	8002580 <HAL_GPIO_WritePin>

//	calculate_times(&sMicrosteps, &sMictoStepsTime);

	HAL_UART_Receive_IT(&huart2, RxData, 6);
 8000f44:	2206      	movs	r2, #6
 8000f46:	4973      	ldr	r1, [pc, #460]	@ (8001114 <main+0x2bc>)
 8000f48:	4873      	ldr	r0, [pc, #460]	@ (8001118 <main+0x2c0>)
 8000f4a:	f003 fbfa 	bl	8004742 <HAL_UART_Receive_IT>

	HAL_TIM_Base_Start(&htim1);
 8000f4e:	4873      	ldr	r0, [pc, #460]	@ (800111c <main+0x2c4>)
 8000f50:	f002 ff24 	bl	8003d9c <HAL_TIM_Base_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		sElapsedTime.tim1++;
 8000f54:	4b64      	ldr	r3, [pc, #400]	@ (80010e8 <main+0x290>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	4a63      	ldr	r2, [pc, #396]	@ (80010e8 <main+0x290>)
 8000f5c:	6013      	str	r3, [r2, #0]
		sElapsedTime.tim2++;
 8000f5e:	4b62      	ldr	r3, [pc, #392]	@ (80010e8 <main+0x290>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	3301      	adds	r3, #1
 8000f64:	4a60      	ldr	r2, [pc, #384]	@ (80010e8 <main+0x290>)
 8000f66:	6053      	str	r3, [r2, #4]
		sElapsedTime.tim3++;
 8000f68:	4b5f      	ldr	r3, [pc, #380]	@ (80010e8 <main+0x290>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	4a5e      	ldr	r2, [pc, #376]	@ (80010e8 <main+0x290>)
 8000f70:	6093      	str	r3, [r2, #8]
		sElapsedTime.tim4++;
 8000f72:	4b5d      	ldr	r3, [pc, #372]	@ (80010e8 <main+0x290>)
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	3301      	adds	r3, #1
 8000f78:	4a5b      	ldr	r2, [pc, #364]	@ (80010e8 <main+0x290>)
 8000f7a:	60d3      	str	r3, [r2, #12]
		sElapsedTime.tim5++;
 8000f7c:	4b5a      	ldr	r3, [pc, #360]	@ (80010e8 <main+0x290>)
 8000f7e:	691b      	ldr	r3, [r3, #16]
 8000f80:	3301      	adds	r3, #1
 8000f82:	4a59      	ldr	r2, [pc, #356]	@ (80010e8 <main+0x290>)
 8000f84:	6113      	str	r3, [r2, #16]

		if ((sElapsedTime.tim1 == sMictoStepsTime.ms1)
 8000f86:	4b58      	ldr	r3, [pc, #352]	@ (80010e8 <main+0x290>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4b59      	ldr	r3, [pc, #356]	@ (80010f0 <main+0x298>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d13f      	bne.n	8001012 <main+0x1ba>
				&& sMicrosteps.ang1 > 0) {
 8000f92:	4b63      	ldr	r3, [pc, #396]	@ (8001120 <main+0x2c8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	dd3b      	ble.n	8001012 <main+0x1ba>
			HAL_GPIO_TogglePin(STEP1_GPIO_Port, STEP1_Pin);
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	485c      	ldr	r0, [pc, #368]	@ (8001110 <main+0x2b8>)
 8000f9e:	f001 fb07 	bl	80025b0 <HAL_GPIO_TogglePin>
			sElapsedTime.tim1 = 0;
 8000fa2:	4b51      	ldr	r3, [pc, #324]	@ (80010e8 <main+0x290>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]

			if (sUpDwn.up_dn1 == 0) {
 8000fa8:	4b50      	ldr	r3, [pc, #320]	@ (80010ec <main+0x294>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d103      	bne.n	8000fb8 <main+0x160>
				sUpDwn.up_dn1 = 1;
 8000fb0:	4b4e      	ldr	r3, [pc, #312]	@ (80010ec <main+0x294>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	e002      	b.n	8000fbe <main+0x166>
			} else {
				sUpDwn.up_dn1 = 0;
 8000fb8:	4b4c      	ldr	r3, [pc, #304]	@ (80010ec <main+0x294>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
			}

			if (sUpDwn.up_dn1 == 0) {
 8000fbe:	4b4b      	ldr	r3, [pc, #300]	@ (80010ec <main+0x294>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d125      	bne.n	8001012 <main+0x1ba>
				sMicrosteps.ang1--;
 8000fc6:	4b56      	ldr	r3, [pc, #344]	@ (8001120 <main+0x2c8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	4a54      	ldr	r2, [pc, #336]	@ (8001120 <main+0x2c8>)
 8000fce:	6013      	str	r3, [r2, #0]
				jointAngles.j1 +=
 8000fd0:	4b48      	ldr	r3, [pc, #288]	@ (80010f4 <main+0x29c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fa5b 	bl	8000490 <__aeabi_f2d>
 8000fda:	4604      	mov	r4, r0
 8000fdc:	460d      	mov	r5, r1
						jointDirections.d1 * 1.0
 8000fde:	4b4b      	ldr	r3, [pc, #300]	@ (800110c <main+0x2b4>)
 8000fe0:	f993 3000 	ldrsb.w	r3, [r3]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fa41 	bl	800046c <__aeabi_i2d>
								/ ((float) JOINT1_REDUCTION
 8000fea:	a33b      	add	r3, pc, #236	@ (adr r3, 80010d8 <main+0x280>)
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	f7ff fbd0 	bl	8000794 <__aeabi_ddiv>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
				jointAngles.j1 +=
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	f7ff f8ea 	bl	80001d4 <__adddf3>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f7ff fcd4 	bl	80009b4 <__aeabi_d2f>
 800100c:	4603      	mov	r3, r0
 800100e:	4a39      	ldr	r2, [pc, #228]	@ (80010f4 <main+0x29c>)
 8001010:	6013      	str	r3, [r2, #0]
										* (float) MICROSTEPS_FOR_DEG);
			}
		}
		if ((sElapsedTime.tim2 == sMictoStepsTime.ms2)
 8001012:	4b35      	ldr	r3, [pc, #212]	@ (80010e8 <main+0x290>)
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	4b36      	ldr	r3, [pc, #216]	@ (80010f0 <main+0x298>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	429a      	cmp	r2, r3
 800101c:	d141      	bne.n	80010a2 <main+0x24a>
				&& sMicrosteps.ang2 > 0) {
 800101e:	4b40      	ldr	r3, [pc, #256]	@ (8001120 <main+0x2c8>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	dd3d      	ble.n	80010a2 <main+0x24a>
			HAL_GPIO_TogglePin(STEP2_GPIO_Port, STEP2_Pin);
 8001026:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800102a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800102e:	f001 fabf 	bl	80025b0 <HAL_GPIO_TogglePin>
			sElapsedTime.tim2 = 0;
 8001032:	4b2d      	ldr	r3, [pc, #180]	@ (80010e8 <main+0x290>)
 8001034:	2200      	movs	r2, #0
 8001036:	605a      	str	r2, [r3, #4]

			if (sUpDwn.up_dn2 == 0) {
 8001038:	4b2c      	ldr	r3, [pc, #176]	@ (80010ec <main+0x294>)
 800103a:	785b      	ldrb	r3, [r3, #1]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d103      	bne.n	8001048 <main+0x1f0>
				sUpDwn.up_dn2 = 1;
 8001040:	4b2a      	ldr	r3, [pc, #168]	@ (80010ec <main+0x294>)
 8001042:	2201      	movs	r2, #1
 8001044:	705a      	strb	r2, [r3, #1]
 8001046:	e002      	b.n	800104e <main+0x1f6>
			} else {
				sUpDwn.up_dn2 = 0;
 8001048:	4b28      	ldr	r3, [pc, #160]	@ (80010ec <main+0x294>)
 800104a:	2200      	movs	r2, #0
 800104c:	705a      	strb	r2, [r3, #1]
			}

			if (sUpDwn.up_dn2 == 0) {
 800104e:	4b27      	ldr	r3, [pc, #156]	@ (80010ec <main+0x294>)
 8001050:	785b      	ldrb	r3, [r3, #1]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d125      	bne.n	80010a2 <main+0x24a>
				sMicrosteps.ang2--;
 8001056:	4b32      	ldr	r3, [pc, #200]	@ (8001120 <main+0x2c8>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	4a30      	ldr	r2, [pc, #192]	@ (8001120 <main+0x2c8>)
 800105e:	6053      	str	r3, [r2, #4]
				jointAngles.j2 +=
 8001060:	4b24      	ldr	r3, [pc, #144]	@ (80010f4 <main+0x29c>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fa13 	bl	8000490 <__aeabi_f2d>
 800106a:	4604      	mov	r4, r0
 800106c:	460d      	mov	r5, r1
						jointDirections.d2 * 1.0
 800106e:	4b27      	ldr	r3, [pc, #156]	@ (800110c <main+0x2b4>)
 8001070:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff f9f9 	bl	800046c <__aeabi_i2d>
								/ ((float) JOINT2_REDUCTION
 800107a:	a319      	add	r3, pc, #100	@ (adr r3, 80010e0 <main+0x288>)
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	f7ff fb88 	bl	8000794 <__aeabi_ddiv>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
				jointAngles.j2 +=
 8001088:	4620      	mov	r0, r4
 800108a:	4629      	mov	r1, r5
 800108c:	f7ff f8a2 	bl	80001d4 <__adddf3>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff fc8c 	bl	80009b4 <__aeabi_d2f>
 800109c:	4603      	mov	r3, r0
 800109e:	4a15      	ldr	r2, [pc, #84]	@ (80010f4 <main+0x29c>)
 80010a0:	6053      	str	r3, [r2, #4]
										* (float) MICROSTEPS_FOR_DEG);
			}
		}
		if ((sElapsedTime.tim3 == sMictoStepsTime.ms3)
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <main+0x290>)
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <main+0x298>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d167      	bne.n	800117e <main+0x326>
				&& sMicrosteps.ang3 > 0) {
 80010ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001120 <main+0x2c8>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	dd63      	ble.n	800117e <main+0x326>
			HAL_GPIO_TogglePin(STEP3_GPIO_Port, STEP3_Pin);
 80010b6:	2110      	movs	r1, #16
 80010b8:	4815      	ldr	r0, [pc, #84]	@ (8001110 <main+0x2b8>)
 80010ba:	f001 fa79 	bl	80025b0 <HAL_GPIO_TogglePin>
			sElapsedTime.tim3 = 0;
 80010be:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <main+0x290>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]

			if (sUpDwn.up_dn3 == 0) {
 80010c4:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <main+0x294>)
 80010c6:	789b      	ldrb	r3, [r3, #2]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d12b      	bne.n	8001124 <main+0x2cc>
				sUpDwn.up_dn3 = 1;
 80010cc:	4b07      	ldr	r3, [pc, #28]	@ (80010ec <main+0x294>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	709a      	strb	r2, [r3, #2]
 80010d2:	e02a      	b.n	800112a <main+0x2d2>
 80010d4:	f3af 8000 	nop.w
 80010d8:	40000000 	.word	0x40000000
 80010dc:	402a5fa4 	.word	0x402a5fa4
 80010e0:	40000000 	.word	0x40000000
 80010e4:	4063fae1 	.word	0x4063fae1
 80010e8:	20000164 	.word	0x20000164
 80010ec:	20000178 	.word	0x20000178
 80010f0:	20000150 	.word	0x20000150
 80010f4:	20000198 	.word	0x20000198
 80010f8:	3dcccccd 	.word	0x3dcccccd
 80010fc:	3f99999a 	.word	0x3f99999a
 8001100:	4059999a 	.word	0x4059999a
 8001104:	40900000 	.word	0x40900000
 8001108:	40d66666 	.word	0x40d66666
 800110c:	20000148 	.word	0x20000148
 8001110:	48000400 	.word	0x48000400
 8001114:	200001ac 	.word	0x200001ac
 8001118:	200000c0 	.word	0x200000c0
 800111c:	20000028 	.word	0x20000028
 8001120:	20000180 	.word	0x20000180
			} else {
				sUpDwn.up_dn3 = 0;
 8001124:	4b98      	ldr	r3, [pc, #608]	@ (8001388 <main+0x530>)
 8001126:	2200      	movs	r2, #0
 8001128:	709a      	strb	r2, [r3, #2]
			}

			if (sUpDwn.up_dn3 == 0) {
 800112a:	4b97      	ldr	r3, [pc, #604]	@ (8001388 <main+0x530>)
 800112c:	789b      	ldrb	r3, [r3, #2]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d125      	bne.n	800117e <main+0x326>
				sMicrosteps.ang3--;
 8001132:	4b96      	ldr	r3, [pc, #600]	@ (800138c <main+0x534>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	3b01      	subs	r3, #1
 8001138:	4a94      	ldr	r2, [pc, #592]	@ (800138c <main+0x534>)
 800113a:	6093      	str	r3, [r2, #8]
				jointAngles.j3 +=
 800113c:	4b94      	ldr	r3, [pc, #592]	@ (8001390 <main+0x538>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f9a5 	bl	8000490 <__aeabi_f2d>
 8001146:	4604      	mov	r4, r0
 8001148:	460d      	mov	r5, r1
						jointDirections.d3 * 1.0
 800114a:	4b92      	ldr	r3, [pc, #584]	@ (8001394 <main+0x53c>)
 800114c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f98b 	bl	800046c <__aeabi_i2d>
								/ ((float) JOINT3_REDUCTION
 8001156:	a386      	add	r3, pc, #536	@ (adr r3, 8001370 <main+0x518>)
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	f7ff fb1a 	bl	8000794 <__aeabi_ddiv>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
				jointAngles.j3 +=
 8001164:	4620      	mov	r0, r4
 8001166:	4629      	mov	r1, r5
 8001168:	f7ff f834 	bl	80001d4 <__adddf3>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fc1e 	bl	80009b4 <__aeabi_d2f>
 8001178:	4603      	mov	r3, r0
 800117a:	4a85      	ldr	r2, [pc, #532]	@ (8001390 <main+0x538>)
 800117c:	6093      	str	r3, [r2, #8]
										* (float) MICROSTEPS_FOR_DEG);
			}
		}
		if ((sElapsedTime.tim4 == sMictoStepsTime.ms4)
 800117e:	4b86      	ldr	r3, [pc, #536]	@ (8001398 <main+0x540>)
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	4b86      	ldr	r3, [pc, #536]	@ (800139c <main+0x544>)
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	429a      	cmp	r2, r3
 8001188:	d174      	bne.n	8001274 <main+0x41c>
				&& sMicrosteps.ang4 > 0) {
 800118a:	4b80      	ldr	r3, [pc, #512]	@ (800138c <main+0x534>)
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	dd70      	ble.n	8001274 <main+0x41c>
			HAL_GPIO_TogglePin(STEP4_GPIO_Port, STEP4_Pin);
 8001192:	2110      	movs	r1, #16
 8001194:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001198:	f001 fa0a 	bl	80025b0 <HAL_GPIO_TogglePin>
			sElapsedTime.tim4 = 0;
 800119c:	4b7e      	ldr	r3, [pc, #504]	@ (8001398 <main+0x540>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]

			if (sUpDwn.up_dn4 == 0) {
 80011a2:	4b79      	ldr	r3, [pc, #484]	@ (8001388 <main+0x530>)
 80011a4:	78db      	ldrb	r3, [r3, #3]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d103      	bne.n	80011b2 <main+0x35a>
				sUpDwn.up_dn4 = 1;
 80011aa:	4b77      	ldr	r3, [pc, #476]	@ (8001388 <main+0x530>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	70da      	strb	r2, [r3, #3]
 80011b0:	e002      	b.n	80011b8 <main+0x360>
			} else {
				sUpDwn.up_dn4 = 0;
 80011b2:	4b75      	ldr	r3, [pc, #468]	@ (8001388 <main+0x530>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	70da      	strb	r2, [r3, #3]
			}

			if (sUpDwn.up_dn4 == 0) {
 80011b8:	4b73      	ldr	r3, [pc, #460]	@ (8001388 <main+0x530>)
 80011ba:	78db      	ldrb	r3, [r3, #3]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d159      	bne.n	8001274 <main+0x41c>
				sMicrosteps.ang4--;
 80011c0:	4b72      	ldr	r3, [pc, #456]	@ (800138c <main+0x534>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	4a71      	ldr	r2, [pc, #452]	@ (800138c <main+0x534>)
 80011c8:	60d3      	str	r3, [r2, #12]

				jointAngles.j4 +=
 80011ca:	4b71      	ldr	r3, [pc, #452]	@ (8001390 <main+0x538>)
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f95e 	bl	8000490 <__aeabi_f2d>
 80011d4:	4604      	mov	r4, r0
 80011d6:	460d      	mov	r5, r1
						jointDirections.d4 * 0.5
 80011d8:	4b6e      	ldr	r3, [pc, #440]	@ (8001394 <main+0x53c>)
 80011da:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f944 	bl	800046c <__aeabi_i2d>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b6d      	ldr	r3, [pc, #436]	@ (80013a0 <main+0x548>)
 80011ea:	f7ff f9a9 	bl	8000540 <__aeabi_dmul>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
								/ ((float) JOINT4_REDUCTION
 80011f6:	a360      	add	r3, pc, #384	@ (adr r3, 8001378 <main+0x520>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff faca 	bl	8000794 <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
				jointAngles.j4 +=
 8001204:	4620      	mov	r0, r4
 8001206:	4629      	mov	r1, r5
 8001208:	f7fe ffe4 	bl	80001d4 <__adddf3>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fbce 	bl	80009b4 <__aeabi_d2f>
 8001218:	4603      	mov	r3, r0
 800121a:	4a5d      	ldr	r2, [pc, #372]	@ (8001390 <main+0x538>)
 800121c:	60d3      	str	r3, [r2, #12]
										* (float) MICROSTEPS_FOR_DEG);
				jointAngles.j5 +=
 800121e:	4b5c      	ldr	r3, [pc, #368]	@ (8001390 <main+0x538>)
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f934 	bl	8000490 <__aeabi_f2d>
 8001228:	4604      	mov	r4, r0
 800122a:	460d      	mov	r5, r1
						-jointDirections.d4 * 0.5
 800122c:	4b59      	ldr	r3, [pc, #356]	@ (8001394 <main+0x53c>)
 800122e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001232:	425b      	negs	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f919 	bl	800046c <__aeabi_i2d>
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	4b58      	ldr	r3, [pc, #352]	@ (80013a0 <main+0x548>)
 8001240:	f7ff f97e 	bl	8000540 <__aeabi_dmul>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
								/ ((float) JOINT5_REDUCTION
 800124c:	a34c      	add	r3, pc, #304	@ (adr r3, 8001380 <main+0x528>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	f7ff fa9f 	bl	8000794 <__aeabi_ddiv>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
				jointAngles.j5 +=
 800125a:	4620      	mov	r0, r4
 800125c:	4629      	mov	r1, r5
 800125e:	f7fe ffb9 	bl	80001d4 <__adddf3>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	f7ff fba3 	bl	80009b4 <__aeabi_d2f>
 800126e:	4603      	mov	r3, r0
 8001270:	4a47      	ldr	r2, [pc, #284]	@ (8001390 <main+0x538>)
 8001272:	6113      	str	r3, [r2, #16]
										* (float) MICROSTEPS_FOR_DEG);
			}
		}
		if ((sElapsedTime.tim5 == sMictoStepsTime.ms5)
 8001274:	4b48      	ldr	r3, [pc, #288]	@ (8001398 <main+0x540>)
 8001276:	691a      	ldr	r2, [r3, #16]
 8001278:	4b48      	ldr	r3, [pc, #288]	@ (800139c <main+0x544>)
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	429a      	cmp	r2, r3
 800127e:	d173      	bne.n	8001368 <main+0x510>
				&& sMicrosteps.ang5 > 0) {
 8001280:	4b42      	ldr	r3, [pc, #264]	@ (800138c <main+0x534>)
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	2b00      	cmp	r3, #0
 8001286:	dd6f      	ble.n	8001368 <main+0x510>
			HAL_GPIO_TogglePin(STEP5_GPIO_Port, STEP5_Pin);
 8001288:	2140      	movs	r1, #64	@ 0x40
 800128a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128e:	f001 f98f 	bl	80025b0 <HAL_GPIO_TogglePin>
			sElapsedTime.tim5 = 0;
 8001292:	4b41      	ldr	r3, [pc, #260]	@ (8001398 <main+0x540>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]

			if (sUpDwn.up_dn5 == 0) {
 8001298:	4b3b      	ldr	r3, [pc, #236]	@ (8001388 <main+0x530>)
 800129a:	791b      	ldrb	r3, [r3, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d103      	bne.n	80012a8 <main+0x450>
				sUpDwn.up_dn5 = 1;
 80012a0:	4b39      	ldr	r3, [pc, #228]	@ (8001388 <main+0x530>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	711a      	strb	r2, [r3, #4]
 80012a6:	e002      	b.n	80012ae <main+0x456>
			} else {
				sUpDwn.up_dn5 = 0;
 80012a8:	4b37      	ldr	r3, [pc, #220]	@ (8001388 <main+0x530>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	711a      	strb	r2, [r3, #4]
			}

			if (sUpDwn.up_dn5 == 0) {
 80012ae:	4b36      	ldr	r3, [pc, #216]	@ (8001388 <main+0x530>)
 80012b0:	791b      	ldrb	r3, [r3, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d158      	bne.n	8001368 <main+0x510>
				sMicrosteps.ang5--;
 80012b6:	4b35      	ldr	r3, [pc, #212]	@ (800138c <main+0x534>)
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	4a33      	ldr	r2, [pc, #204]	@ (800138c <main+0x534>)
 80012be:	6113      	str	r3, [r2, #16]
				jointAngles.j4 +=
 80012c0:	4b33      	ldr	r3, [pc, #204]	@ (8001390 <main+0x538>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f8e3 	bl	8000490 <__aeabi_f2d>
 80012ca:	4604      	mov	r4, r0
 80012cc:	460d      	mov	r5, r1
						jointDirections.d5 * 0.5
 80012ce:	4b31      	ldr	r3, [pc, #196]	@ (8001394 <main+0x53c>)
 80012d0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f8c9 	bl	800046c <__aeabi_i2d>
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	4b30      	ldr	r3, [pc, #192]	@ (80013a0 <main+0x548>)
 80012e0:	f7ff f92e 	bl	8000540 <__aeabi_dmul>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
								/ ((float) JOINT4_REDUCTION
 80012ec:	a322      	add	r3, pc, #136	@ (adr r3, 8001378 <main+0x520>)
 80012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f2:	f7ff fa4f 	bl	8000794 <__aeabi_ddiv>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
				jointAngles.j4 +=
 80012fa:	4620      	mov	r0, r4
 80012fc:	4629      	mov	r1, r5
 80012fe:	f7fe ff69 	bl	80001d4 <__adddf3>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	f7ff fb53 	bl	80009b4 <__aeabi_d2f>
 800130e:	4603      	mov	r3, r0
 8001310:	4a1f      	ldr	r2, [pc, #124]	@ (8001390 <main+0x538>)
 8001312:	60d3      	str	r3, [r2, #12]
										* (float) MICROSTEPS_FOR_DEG);
				jointAngles.j5 +=
 8001314:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <main+0x538>)
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f8b9 	bl	8000490 <__aeabi_f2d>
 800131e:	4604      	mov	r4, r0
 8001320:	460d      	mov	r5, r1
						jointDirections.d5 * 0.5
 8001322:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <main+0x53c>)
 8001324:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f89f 	bl	800046c <__aeabi_i2d>
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <main+0x548>)
 8001334:	f7ff f904 	bl	8000540 <__aeabi_dmul>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
								/ ((float) JOINT5_REDUCTION
 8001340:	a30f      	add	r3, pc, #60	@ (adr r3, 8001380 <main+0x528>)
 8001342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001346:	f7ff fa25 	bl	8000794 <__aeabi_ddiv>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
				jointAngles.j5 +=
 800134e:	4620      	mov	r0, r4
 8001350:	4629      	mov	r1, r5
 8001352:	f7fe ff3f 	bl	80001d4 <__adddf3>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fb29 	bl	80009b4 <__aeabi_d2f>
 8001362:	4603      	mov	r3, r0
 8001364:	4a0a      	ldr	r2, [pc, #40]	@ (8001390 <main+0x538>)
 8001366:	6113      	str	r3, [r2, #16]
										* (float) MICROSTEPS_FOR_DEG);
			}
		}

		delay_us(10);
 8001368:	200a      	movs	r0, #10
 800136a:	f7ff fb73 	bl	8000a54 <delay_us>
		sElapsedTime.tim1++;
 800136e:	e5f1      	b.n	8000f54 <main+0xfc>
 8001370:	20000000 	.word	0x20000000
 8001374:	4056a4dd 	.word	0x4056a4dd
 8001378:	60000000 	.word	0x60000000
 800137c:	4011c28f 	.word	0x4011c28f
 8001380:	a0000000 	.word	0xa0000000
 8001384:	40168e21 	.word	0x40168e21
 8001388:	20000178 	.word	0x20000178
 800138c:	20000180 	.word	0x20000180
 8001390:	20000198 	.word	0x20000198
 8001394:	20000148 	.word	0x20000148
 8001398:	20000164 	.word	0x20000164
 800139c:	20000150 	.word	0x20000150
 80013a0:	3fe00000 	.word	0x3fe00000

080013a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b096      	sub	sp, #88	@ 0x58
 80013a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013ae:	2228      	movs	r2, #40	@ 0x28
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f004 fb1a 	bl	80059ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]
 80013d6:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d8:	2302      	movs	r3, #2
 80013da:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013dc:	2301      	movs	r3, #1
 80013de:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e0:	2310      	movs	r3, #16
 80013e2:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e4:	2302      	movs	r3, #2
 80013e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013e8:	2300      	movs	r3, #0
 80013ea:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013ec:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80013f0:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013f6:	4618      	mov	r0, r3
 80013f8:	f001 f8f4 	bl	80025e4 <HAL_RCC_OscConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0x62>
		Error_Handler();
 8001402:	f000 fc27 	bl	8001c54 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001406:	230f      	movs	r3, #15
 8001408:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140a:	2302      	movs	r3, #2
 800140c:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001412:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001416:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001418:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800141c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800141e:	f107 031c 	add.w	r3, r7, #28
 8001422:	2101      	movs	r1, #1
 8001424:	4618      	mov	r0, r3
 8001426:	f002 f91b 	bl	8003660 <HAL_RCC_ClockConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <SystemClock_Config+0x90>
		Error_Handler();
 8001430:	f000 fc10 	bl	8001c54 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001434:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001438:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	4618      	mov	r0, r3
 8001442:	f002 fb2d 	bl	8003aa0 <HAL_RCCEx_PeriphCLKConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0xac>
		Error_Handler();
 800144c:	f000 fc02 	bl	8001c54 <Error_Handler>
	}
}
 8001450:	bf00      	nop
 8001452:	3758      	adds	r7, #88	@ 0x58
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800145e:	f107 0310 	add.w	r3, r7, #16
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001476:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <MX_TIM1_Init+0xa0>)
 8001478:	4a20      	ldr	r2, [pc, #128]	@ (80014fc <MX_TIM1_Init+0xa4>)
 800147a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 36 - 1;
 800147c:	4b1e      	ldr	r3, [pc, #120]	@ (80014f8 <MX_TIM1_Init+0xa0>)
 800147e:	2223      	movs	r2, #35	@ 0x23
 8001480:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001482:	4b1d      	ldr	r3, [pc, #116]	@ (80014f8 <MX_TIM1_Init+0xa0>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001488:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <MX_TIM1_Init+0xa0>)
 800148a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800148e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001490:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <MX_TIM1_Init+0xa0>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001496:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <MX_TIM1_Init+0xa0>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800149c:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <MX_TIM1_Init+0xa0>)
 800149e:	2280      	movs	r2, #128	@ 0x80
 80014a0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80014a2:	4815      	ldr	r0, [pc, #84]	@ (80014f8 <MX_TIM1_Init+0xa0>)
 80014a4:	f002 fc22 	bl	8003cec <HAL_TIM_Base_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM1_Init+0x5a>
		Error_Handler();
 80014ae:	f000 fbd1 	bl	8001c54 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4619      	mov	r1, r3
 80014be:	480e      	ldr	r0, [pc, #56]	@ (80014f8 <MX_TIM1_Init+0xa0>)
 80014c0:	f002 fdc2 	bl	8004048 <HAL_TIM_ConfigClockSource>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM1_Init+0x76>
		Error_Handler();
 80014ca:	f000 fbc3 	bl	8001c54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4806      	ldr	r0, [pc, #24]	@ (80014f8 <MX_TIM1_Init+0xa0>)
 80014e0:	f002 ffcc 	bl	800447c <HAL_TIMEx_MasterConfigSynchronization>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 80014ea:	f000 fbb3 	bl	8001c54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	3720      	adds	r7, #32
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000028 	.word	0x20000028
 80014fc:	40012c00 	.word	0x40012c00

08001500 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001510:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <MX_TIM6_Init+0x64>)
 8001512:	4a15      	ldr	r2, [pc, #84]	@ (8001568 <MX_TIM6_Init+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 36 - 1;
 8001516:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <MX_TIM6_Init+0x64>)
 8001518:	2223      	movs	r2, #35	@ 0x23
 800151a:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151c:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_TIM6_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 1000 - 1;
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <MX_TIM6_Init+0x64>)
 8001524:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001528:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <MX_TIM6_Init+0x64>)
 800152c:	2280      	movs	r2, #128	@ 0x80
 800152e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001530:	480c      	ldr	r0, [pc, #48]	@ (8001564 <MX_TIM6_Init+0x64>)
 8001532:	f002 fbdb 	bl	8003cec <HAL_TIM_Base_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM6_Init+0x40>
		Error_Handler();
 800153c:	f000 fb8a 	bl	8001c54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	@ (8001564 <MX_TIM6_Init+0x64>)
 800154e:	f002 ff95 	bl	800447c <HAL_TIMEx_MasterConfigSynchronization>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM6_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001558:	f000 fb7c 	bl	8001c54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000074 	.word	0x20000074
 8001568:	40001000 	.word	0x40001000

0800156c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001570:	4b14      	ldr	r3, [pc, #80]	@ (80015c4 <MX_USART2_UART_Init+0x58>)
 8001572:	4a15      	ldr	r2, [pc, #84]	@ (80015c8 <MX_USART2_UART_Init+0x5c>)
 8001574:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001576:	4b13      	ldr	r3, [pc, #76]	@ (80015c4 <MX_USART2_UART_Init+0x58>)
 8001578:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800157c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800157e:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <MX_USART2_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001584:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <MX_USART2_UART_Init+0x58>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800158a:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <MX_USART2_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001590:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <MX_USART2_UART_Init+0x58>)
 8001592:	220c      	movs	r2, #12
 8001594:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001596:	4b0b      	ldr	r3, [pc, #44]	@ (80015c4 <MX_USART2_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800159c:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <MX_USART2_UART_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015a2:	4b08      	ldr	r3, [pc, #32]	@ (80015c4 <MX_USART2_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <MX_USART2_UART_Init+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80015ae:	4805      	ldr	r0, [pc, #20]	@ (80015c4 <MX_USART2_UART_Init+0x58>)
 80015b0:	f002 fff0 	bl	8004594 <HAL_UART_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80015ba:	f000 fb4b 	bl	8001c54 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200000c0 	.word	0x200000c0
 80015c8:	40004400 	.word	0x40004400

080015cc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80015e2:	4b40      	ldr	r3, [pc, #256]	@ (80016e4 <MX_GPIO_Init+0x118>)
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	4a3f      	ldr	r2, [pc, #252]	@ (80016e4 <MX_GPIO_Init+0x118>)
 80015e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015ec:	6153      	str	r3, [r2, #20]
 80015ee:	4b3d      	ldr	r3, [pc, #244]	@ (80016e4 <MX_GPIO_Init+0x118>)
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	4b3a      	ldr	r3, [pc, #232]	@ (80016e4 <MX_GPIO_Init+0x118>)
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	4a39      	ldr	r2, [pc, #228]	@ (80016e4 <MX_GPIO_Init+0x118>)
 8001600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001604:	6153      	str	r3, [r2, #20]
 8001606:	4b37      	ldr	r3, [pc, #220]	@ (80016e4 <MX_GPIO_Init+0x118>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001612:	4b34      	ldr	r3, [pc, #208]	@ (80016e4 <MX_GPIO_Init+0x118>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	4a33      	ldr	r2, [pc, #204]	@ (80016e4 <MX_GPIO_Init+0x118>)
 8001618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800161c:	6153      	str	r3, [r2, #20]
 800161e:	4b31      	ldr	r3, [pc, #196]	@ (80016e4 <MX_GPIO_Init+0x118>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 8001630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001634:	f000 ffa4 	bl	8002580 <HAL_GPIO_WritePin>
			STEP4_Pin | DIR4_Pin | STEP5_Pin | DIR5_Pin | DIR2_Pin | DIR1_Pin
					| STEP2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, STEP1_Pin | STEP3_Pin | DIR3_Pin, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	2132      	movs	r1, #50	@ 0x32
 800163c:	482a      	ldr	r0, [pc, #168]	@ (80016e8 <MX_GPIO_Init+0x11c>)
 800163e:	f000 ff9f 	bl	8002580 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : STEP4_Pin STEP5_Pin STEP2_Pin */
	GPIO_InitStruct.Pin = STEP4_Pin | STEP5_Pin | STEP2_Pin;
 8001642:	f44f 6305 	mov.w	r3, #2128	@ 0x850
 8001646:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001648:	2301      	movs	r3, #1
 800164a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800164c:	2302      	movs	r3, #2
 800164e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	4619      	mov	r1, r3
 800165a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165e:	f000 fe1d 	bl	800229c <HAL_GPIO_Init>

	/*Configure GPIO pins : DIR4_Pin DIR5_Pin DIR2_Pin */
	GPIO_InitStruct.Pin = DIR4_Pin | DIR5_Pin | DIR2_Pin;
 8001662:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8001666:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	4619      	mov	r1, r3
 800167a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800167e:	f000 fe0d 	bl	800229c <HAL_GPIO_Init>

	/*Configure GPIO pin : STEP1_Pin */
	GPIO_InitStruct.Pin = STEP1_Pin;
 8001682:	2302      	movs	r3, #2
 8001684:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800168a:	2302      	movs	r3, #2
 800168c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	4619      	mov	r1, r3
 8001698:	4813      	ldr	r0, [pc, #76]	@ (80016e8 <MX_GPIO_Init+0x11c>)
 800169a:	f000 fdff 	bl	800229c <HAL_GPIO_Init>

	/*Configure GPIO pin : DIR1_Pin */
	GPIO_InitStruct.Pin = DIR1_Pin;
 800169e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DIR1_GPIO_Port, &GPIO_InitStruct);
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4619      	mov	r1, r3
 80016b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ba:	f000 fdef 	bl	800229c <HAL_GPIO_Init>

	/*Configure GPIO pins : STEP3_Pin DIR3_Pin */
	GPIO_InitStruct.Pin = STEP3_Pin | DIR3_Pin;
 80016be:	2330      	movs	r3, #48	@ 0x30
 80016c0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	4619      	mov	r1, r3
 80016d4:	4804      	ldr	r0, [pc, #16]	@ (80016e8 <MX_GPIO_Init+0x11c>)
 80016d6:	f000 fde1 	bl	800229c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80016da:	bf00      	nop
 80016dc:	3720      	adds	r7, #32
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40021000 	.word	0x40021000
 80016e8:	48000400 	.word	0x48000400

080016ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, RxData, 6);
 80016f4:	2206      	movs	r2, #6
 80016f6:	49b8      	ldr	r1, [pc, #736]	@ (80019d8 <HAL_UART_RxCpltCallback+0x2ec>)
 80016f8:	48b8      	ldr	r0, [pc, #736]	@ (80019dc <HAL_UART_RxCpltCallback+0x2f0>)
 80016fa:	f003 f822 	bl	8004742 <HAL_UART_Receive_IT>
	if (RxData[0] == 0xAA) {
 80016fe:	4bb6      	ldr	r3, [pc, #728]	@ (80019d8 <HAL_UART_RxCpltCallback+0x2ec>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2baa      	cmp	r3, #170	@ 0xaa
 8001704:	f040 8115 	bne.w	8001932 <HAL_UART_RxCpltCallback+0x246>
		switch (RxData[1]) {
 8001708:	4bb3      	ldr	r3, [pc, #716]	@ (80019d8 <HAL_UART_RxCpltCallback+0x2ec>)
 800170a:	785b      	ldrb	r3, [r3, #1]
 800170c:	3ba1      	subs	r3, #161	@ 0xa1
 800170e:	2b04      	cmp	r3, #4
 8001710:	f200 827f 	bhi.w	8001c12 <HAL_UART_RxCpltCallback+0x526>
 8001714:	a201      	add	r2, pc, #4	@ (adr r2, 800171c <HAL_UART_RxCpltCallback+0x30>)
 8001716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171a:	bf00      	nop
 800171c:	08001731 	.word	0x08001731
 8001720:	0800179f 	.word	0x0800179f
 8001724:	0800180d 	.word	0x0800180d
 8001728:	0800187b 	.word	0x0800187b
 800172c:	080018d7 	.word	0x080018d7
		float ang;
	case 0xA1:
		ang = *(float*) (&RxData[2]);
 8001730:	4bab      	ldr	r3, [pc, #684]	@ (80019e0 <HAL_UART_RxCpltCallback+0x2f4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
		jointDirections.d1 = ang < 0 ? -1 : 1;
 8001736:	edd7 7a03 	vldr	s15, [r7, #12]
 800173a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001742:	d502      	bpl.n	800174a <HAL_UART_RxCpltCallback+0x5e>
 8001744:	f04f 32ff 	mov.w	r2, #4294967295
 8001748:	e000      	b.n	800174c <HAL_UART_RxCpltCallback+0x60>
 800174a:	2201      	movs	r2, #1
 800174c:	4ba5      	ldr	r3, [pc, #660]	@ (80019e4 <HAL_UART_RxCpltCallback+0x2f8>)
 800174e:	701a      	strb	r2, [r3, #0]
		sMicrosteps.ang1 = rotate_joint_1(abs(ang), ang < 0 ? 0 : 1);
 8001750:	edd7 7a03 	vldr	s15, [r7, #12]
 8001754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001758:	ee17 3a90 	vmov	r3, s15
 800175c:	2b00      	cmp	r3, #0
 800175e:	bfb8      	it	lt
 8001760:	425b      	neglt	r3, r3
 8001762:	ee07 3a90 	vmov	s15, r3
 8001766:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800176a:	edd7 7a03 	vldr	s15, [r7, #12]
 800176e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	bf4c      	ite	mi
 8001778:	2301      	movmi	r3, #1
 800177a:	2300      	movpl	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	f083 0301 	eor.w	r3, r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	4618      	mov	r0, r3
 8001788:	eeb0 0a47 	vmov.f32	s0, s14
 800178c:	f7ff f97c 	bl	8000a88 <rotate_joint_1>
 8001790:	4603      	mov	r3, r0
 8001792:	4a95      	ldr	r2, [pc, #596]	@ (80019e8 <HAL_UART_RxCpltCallback+0x2fc>)
 8001794:	6013      	str	r3, [r2, #0]
		sElapsedTime.tim1 = 0;
 8001796:	4b95      	ldr	r3, [pc, #596]	@ (80019ec <HAL_UART_RxCpltCallback+0x300>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
		break;
 800179c:	e238      	b.n	8001c10 <HAL_UART_RxCpltCallback+0x524>
	case 0xA2:
		ang = *(float*) (&RxData[2]);
 800179e:	4b90      	ldr	r3, [pc, #576]	@ (80019e0 <HAL_UART_RxCpltCallback+0x2f4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	60fb      	str	r3, [r7, #12]
		jointDirections.d2 = ang < 0 ? -1 : 1;
 80017a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80017a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b0:	d502      	bpl.n	80017b8 <HAL_UART_RxCpltCallback+0xcc>
 80017b2:	f04f 32ff 	mov.w	r2, #4294967295
 80017b6:	e000      	b.n	80017ba <HAL_UART_RxCpltCallback+0xce>
 80017b8:	2201      	movs	r2, #1
 80017ba:	4b8a      	ldr	r3, [pc, #552]	@ (80019e4 <HAL_UART_RxCpltCallback+0x2f8>)
 80017bc:	705a      	strb	r2, [r3, #1]
		sMicrosteps.ang2 = rotate_joint_2(abs(ang), ang < 0 ? 0 : 1);
 80017be:	edd7 7a03 	vldr	s15, [r7, #12]
 80017c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c6:	ee17 3a90 	vmov	r3, s15
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	bfb8      	it	lt
 80017ce:	425b      	neglt	r3, r3
 80017d0:	ee07 3a90 	vmov	s15, r3
 80017d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80017dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e4:	bf4c      	ite	mi
 80017e6:	2301      	movmi	r3, #1
 80017e8:	2300      	movpl	r3, #0
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	f083 0301 	eor.w	r3, r3, #1
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	4618      	mov	r0, r3
 80017f6:	eeb0 0a47 	vmov.f32	s0, s14
 80017fa:	f7ff f981 	bl	8000b00 <rotate_joint_2>
 80017fe:	4603      	mov	r3, r0
 8001800:	4a79      	ldr	r2, [pc, #484]	@ (80019e8 <HAL_UART_RxCpltCallback+0x2fc>)
 8001802:	6053      	str	r3, [r2, #4]
		sElapsedTime.tim2 = 0;
 8001804:	4b79      	ldr	r3, [pc, #484]	@ (80019ec <HAL_UART_RxCpltCallback+0x300>)
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
		break;
 800180a:	e201      	b.n	8001c10 <HAL_UART_RxCpltCallback+0x524>
	case 0xA3:
		ang = *(float*) (&RxData[2]);
 800180c:	4b74      	ldr	r3, [pc, #464]	@ (80019e0 <HAL_UART_RxCpltCallback+0x2f4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60fb      	str	r3, [r7, #12]
		jointDirections.d3 = ang < 0 ? -1 : 1;
 8001812:	edd7 7a03 	vldr	s15, [r7, #12]
 8001816:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800181a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181e:	d502      	bpl.n	8001826 <HAL_UART_RxCpltCallback+0x13a>
 8001820:	f04f 32ff 	mov.w	r2, #4294967295
 8001824:	e000      	b.n	8001828 <HAL_UART_RxCpltCallback+0x13c>
 8001826:	2201      	movs	r2, #1
 8001828:	4b6e      	ldr	r3, [pc, #440]	@ (80019e4 <HAL_UART_RxCpltCallback+0x2f8>)
 800182a:	709a      	strb	r2, [r3, #2]
		sMicrosteps.ang3 = rotate_joint_3(abs(ang), ang < 0 ? 0 : 1);
 800182c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001834:	ee17 3a90 	vmov	r3, s15
 8001838:	2b00      	cmp	r3, #0
 800183a:	bfb8      	it	lt
 800183c:	425b      	neglt	r3, r3
 800183e:	ee07 3a90 	vmov	s15, r3
 8001842:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001846:	edd7 7a03 	vldr	s15, [r7, #12]
 800184a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	bf4c      	ite	mi
 8001854:	2301      	movmi	r3, #1
 8001856:	2300      	movpl	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	f083 0301 	eor.w	r3, r3, #1
 800185e:	b2db      	uxtb	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	4618      	mov	r0, r3
 8001864:	eeb0 0a47 	vmov.f32	s0, s14
 8001868:	f7ff f97e 	bl	8000b68 <rotate_joint_3>
 800186c:	4603      	mov	r3, r0
 800186e:	4a5e      	ldr	r2, [pc, #376]	@ (80019e8 <HAL_UART_RxCpltCallback+0x2fc>)
 8001870:	6093      	str	r3, [r2, #8]
		sElapsedTime.tim3 = 0;
 8001872:	4b5e      	ldr	r3, [pc, #376]	@ (80019ec <HAL_UART_RxCpltCallback+0x300>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
		break;
 8001878:	e1ca      	b.n	8001c10 <HAL_UART_RxCpltCallback+0x524>
	case 0xA4:
		ang = *(float*) (&RxData[2]);
 800187a:	4b59      	ldr	r3, [pc, #356]	@ (80019e0 <HAL_UART_RxCpltCallback+0x2f4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	60fb      	str	r3, [r7, #12]
		rotate_diff_joint(abs(ang), 0, ang < 0 ? 0 : 1, 0, &sMicrosteps.ang4,
 8001880:	edd7 7a03 	vldr	s15, [r7, #12]
 8001884:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001888:	ee17 3a90 	vmov	r3, s15
 800188c:	2b00      	cmp	r3, #0
 800188e:	bfb8      	it	lt
 8001890:	425b      	neglt	r3, r3
 8001892:	ee07 3a90 	vmov	s15, r3
 8001896:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800189a:	edd7 7a03 	vldr	s15, [r7, #12]
 800189e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a6:	bf4c      	ite	mi
 80018a8:	2301      	movmi	r3, #1
 80018aa:	2300      	movpl	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f083 0301 	eor.w	r3, r3, #1
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	b2d8      	uxtb	r0, r3
 80018b6:	4b4e      	ldr	r3, [pc, #312]	@ (80019f0 <HAL_UART_RxCpltCallback+0x304>)
 80018b8:	4a4e      	ldr	r2, [pc, #312]	@ (80019f4 <HAL_UART_RxCpltCallback+0x308>)
 80018ba:	2100      	movs	r1, #0
 80018bc:	eddf 0a4e 	vldr	s1, [pc, #312]	@ 80019f8 <HAL_UART_RxCpltCallback+0x30c>
 80018c0:	eeb0 0a47 	vmov.f32	s0, s14
 80018c4:	f7ff f994 	bl	8000bf0 <rotate_diff_joint>
				&sMicrosteps.ang5);
		sElapsedTime.tim4 = 0;
 80018c8:	4b48      	ldr	r3, [pc, #288]	@ (80019ec <HAL_UART_RxCpltCallback+0x300>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
		sElapsedTime.tim5 = 0;
 80018ce:	4b47      	ldr	r3, [pc, #284]	@ (80019ec <HAL_UART_RxCpltCallback+0x300>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
		break;
 80018d4:	e19c      	b.n	8001c10 <HAL_UART_RxCpltCallback+0x524>
	case 0xA5:
		ang = *(float*) (&RxData[2]);
 80018d6:	4b42      	ldr	r3, [pc, #264]	@ (80019e0 <HAL_UART_RxCpltCallback+0x2f4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	60fb      	str	r3, [r7, #12]
		rotate_diff_joint(0, abs(ang), 0, ang < 0 ? 0 : 1, &sMicrosteps.ang4,
 80018dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80018e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e4:	ee17 3a90 	vmov	r3, s15
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	bfb8      	it	lt
 80018ec:	425b      	neglt	r3, r3
 80018ee:	ee07 3a90 	vmov	s15, r3
 80018f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80018fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001902:	bf4c      	ite	mi
 8001904:	2301      	movmi	r3, #1
 8001906:	2300      	movpl	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f083 0301 	eor.w	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	b2d9      	uxtb	r1, r3
 8001912:	4b37      	ldr	r3, [pc, #220]	@ (80019f0 <HAL_UART_RxCpltCallback+0x304>)
 8001914:	4a37      	ldr	r2, [pc, #220]	@ (80019f4 <HAL_UART_RxCpltCallback+0x308>)
 8001916:	2000      	movs	r0, #0
 8001918:	eef0 0a47 	vmov.f32	s1, s14
 800191c:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 80019f8 <HAL_UART_RxCpltCallback+0x30c>
 8001920:	f7ff f966 	bl	8000bf0 <rotate_diff_joint>
				&sMicrosteps.ang5);
		sElapsedTime.tim4 = 0;
 8001924:	4b31      	ldr	r3, [pc, #196]	@ (80019ec <HAL_UART_RxCpltCallback+0x300>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
		sElapsedTime.tim5 = 0;
 800192a:	4b30      	ldr	r3, [pc, #192]	@ (80019ec <HAL_UART_RxCpltCallback+0x300>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
		break;
 8001930:	e16e      	b.n	8001c10 <HAL_UART_RxCpltCallback+0x524>
		}
	} else if (RxData[0] == 0xAB) {
 8001932:	4b29      	ldr	r3, [pc, #164]	@ (80019d8 <HAL_UART_RxCpltCallback+0x2ec>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2bab      	cmp	r3, #171	@ 0xab
 8001938:	f040 8138 	bne.w	8001bac <HAL_UART_RxCpltCallback+0x4c0>
		switch (RxData[1]) {
 800193c:	4b26      	ldr	r3, [pc, #152]	@ (80019d8 <HAL_UART_RxCpltCallback+0x2ec>)
 800193e:	785b      	ldrb	r3, [r3, #1]
 8001940:	3ba1      	subs	r3, #161	@ 0xa1
 8001942:	2b04      	cmp	r3, #4
 8001944:	f200 8165 	bhi.w	8001c12 <HAL_UART_RxCpltCallback+0x526>
 8001948:	a201      	add	r2, pc, #4	@ (adr r2, 8001950 <HAL_UART_RxCpltCallback+0x264>)
 800194a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194e:	bf00      	nop
 8001950:	08001965 	.word	0x08001965
 8001954:	0800198b 	.word	0x0800198b
 8001958:	080019b1 	.word	0x080019b1
 800195c:	08001a09 	.word	0x08001a09
 8001960:	08001a13 	.word	0x08001a13
		case 0xA1:
			ang1 = *(float*) (&RxData[2]);
 8001964:	4b1e      	ldr	r3, [pc, #120]	@ (80019e0 <HAL_UART_RxCpltCallback+0x2f4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a24      	ldr	r2, [pc, #144]	@ (80019fc <HAL_UART_RxCpltCallback+0x310>)
 800196a:	6013      	str	r3, [r2, #0]
			jointDirections.d1 = ang1 < 0 ? -1 : 1;
 800196c:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <HAL_UART_RxCpltCallback+0x310>)
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197a:	d502      	bpl.n	8001982 <HAL_UART_RxCpltCallback+0x296>
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	e000      	b.n	8001984 <HAL_UART_RxCpltCallback+0x298>
 8001982:	2201      	movs	r2, #1
 8001984:	4b17      	ldr	r3, [pc, #92]	@ (80019e4 <HAL_UART_RxCpltCallback+0x2f8>)
 8001986:	701a      	strb	r2, [r3, #0]
			break;
 8001988:	e142      	b.n	8001c10 <HAL_UART_RxCpltCallback+0x524>
		case 0xA2:
			ang2 = *(float*) (&RxData[2]);
 800198a:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <HAL_UART_RxCpltCallback+0x2f4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a1c      	ldr	r2, [pc, #112]	@ (8001a00 <HAL_UART_RxCpltCallback+0x314>)
 8001990:	6013      	str	r3, [r2, #0]
			jointDirections.d2 = ang2 < 0 ? -1 : 1;
 8001992:	4b1b      	ldr	r3, [pc, #108]	@ (8001a00 <HAL_UART_RxCpltCallback+0x314>)
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800199c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a0:	d502      	bpl.n	80019a8 <HAL_UART_RxCpltCallback+0x2bc>
 80019a2:	f04f 32ff 	mov.w	r2, #4294967295
 80019a6:	e000      	b.n	80019aa <HAL_UART_RxCpltCallback+0x2be>
 80019a8:	2201      	movs	r2, #1
 80019aa:	4b0e      	ldr	r3, [pc, #56]	@ (80019e4 <HAL_UART_RxCpltCallback+0x2f8>)
 80019ac:	705a      	strb	r2, [r3, #1]
			break;
 80019ae:	e12f      	b.n	8001c10 <HAL_UART_RxCpltCallback+0x524>
		case 0xA3:
			ang3 = *(float*) (&RxData[2]);
 80019b0:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <HAL_UART_RxCpltCallback+0x2f4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a13      	ldr	r2, [pc, #76]	@ (8001a04 <HAL_UART_RxCpltCallback+0x318>)
 80019b6:	6013      	str	r3, [r2, #0]
			jointDirections.d3 = ang3 < 0 ? -1 : 1;
 80019b8:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <HAL_UART_RxCpltCallback+0x318>)
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	d502      	bpl.n	80019ce <HAL_UART_RxCpltCallback+0x2e2>
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295
 80019cc:	e000      	b.n	80019d0 <HAL_UART_RxCpltCallback+0x2e4>
 80019ce:	2201      	movs	r2, #1
 80019d0:	4b04      	ldr	r3, [pc, #16]	@ (80019e4 <HAL_UART_RxCpltCallback+0x2f8>)
 80019d2:	709a      	strb	r2, [r3, #2]
			break;
 80019d4:	e11c      	b.n	8001c10 <HAL_UART_RxCpltCallback+0x524>
 80019d6:	bf00      	nop
 80019d8:	200001ac 	.word	0x200001ac
 80019dc:	200000c0 	.word	0x200000c0
 80019e0:	200001ae 	.word	0x200001ae
 80019e4:	20000148 	.word	0x20000148
 80019e8:	20000180 	.word	0x20000180
 80019ec:	20000164 	.word	0x20000164
 80019f0:	20000190 	.word	0x20000190
 80019f4:	2000018c 	.word	0x2000018c
 80019f8:	00000000 	.word	0x00000000
 80019fc:	200001b4 	.word	0x200001b4
 8001a00:	200001b8 	.word	0x200001b8
 8001a04:	200001bc 	.word	0x200001bc
		case 0xA4:
			ang4 = *(float*) (&RxData[2]);
 8001a08:	4b84      	ldr	r3, [pc, #528]	@ (8001c1c <HAL_UART_RxCpltCallback+0x530>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a84      	ldr	r2, [pc, #528]	@ (8001c20 <HAL_UART_RxCpltCallback+0x534>)
 8001a0e:	6013      	str	r3, [r2, #0]
			break;
 8001a10:	e0fe      	b.n	8001c10 <HAL_UART_RxCpltCallback+0x524>
		case 0xA5:
			ang5 = *(float*) (&RxData[2]);
 8001a12:	4b82      	ldr	r3, [pc, #520]	@ (8001c1c <HAL_UART_RxCpltCallback+0x530>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a83      	ldr	r2, [pc, #524]	@ (8001c24 <HAL_UART_RxCpltCallback+0x538>)
 8001a18:	6013      	str	r3, [r2, #0]
			sMicrosteps.ang1 = rotate_joint_1(abs(ang1), ang1 < 0 ? 0 : 1);
 8001a1a:	4b83      	ldr	r3, [pc, #524]	@ (8001c28 <HAL_UART_RxCpltCallback+0x53c>)
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a24:	ee17 3a90 	vmov	r3, s15
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bfb8      	it	lt
 8001a2c:	425b      	neglt	r3, r3
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a36:	4b7c      	ldr	r3, [pc, #496]	@ (8001c28 <HAL_UART_RxCpltCallback+0x53c>)
 8001a38:	edd3 7a00 	vldr	s15, [r3]
 8001a3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a44:	bf4c      	ite	mi
 8001a46:	2301      	movmi	r3, #1
 8001a48:	2300      	movpl	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	f083 0301 	eor.w	r3, r3, #1
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	eeb0 0a47 	vmov.f32	s0, s14
 8001a5a:	f7ff f815 	bl	8000a88 <rotate_joint_1>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4a72      	ldr	r2, [pc, #456]	@ (8001c2c <HAL_UART_RxCpltCallback+0x540>)
 8001a62:	6013      	str	r3, [r2, #0]
			sMicrosteps.ang2 = rotate_joint_2(abs(ang2), ang2 < 0 ? 0 : 1);
 8001a64:	4b72      	ldr	r3, [pc, #456]	@ (8001c30 <HAL_UART_RxCpltCallback+0x544>)
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a6e:	ee17 3a90 	vmov	r3, s15
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	bfb8      	it	lt
 8001a76:	425b      	neglt	r3, r3
 8001a78:	ee07 3a90 	vmov	s15, r3
 8001a7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a80:	4b6b      	ldr	r3, [pc, #428]	@ (8001c30 <HAL_UART_RxCpltCallback+0x544>)
 8001a82:	edd3 7a00 	vldr	s15, [r3]
 8001a86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8e:	bf4c      	ite	mi
 8001a90:	2301      	movmi	r3, #1
 8001a92:	2300      	movpl	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	f083 0301 	eor.w	r3, r3, #1
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	eeb0 0a47 	vmov.f32	s0, s14
 8001aa4:	f7ff f82c 	bl	8000b00 <rotate_joint_2>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4a60      	ldr	r2, [pc, #384]	@ (8001c2c <HAL_UART_RxCpltCallback+0x540>)
 8001aac:	6053      	str	r3, [r2, #4]
			sMicrosteps.ang3 = rotate_joint_3(abs(ang3), ang3 < 0 ? 0 : 1);
 8001aae:	4b61      	ldr	r3, [pc, #388]	@ (8001c34 <HAL_UART_RxCpltCallback+0x548>)
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ab8:	ee17 3a90 	vmov	r3, s15
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bfb8      	it	lt
 8001ac0:	425b      	neglt	r3, r3
 8001ac2:	ee07 3a90 	vmov	s15, r3
 8001ac6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aca:	4b5a      	ldr	r3, [pc, #360]	@ (8001c34 <HAL_UART_RxCpltCallback+0x548>)
 8001acc:	edd3 7a00 	vldr	s15, [r3]
 8001ad0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad8:	bf4c      	ite	mi
 8001ada:	2301      	movmi	r3, #1
 8001adc:	2300      	movpl	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	f083 0301 	eor.w	r3, r3, #1
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	eeb0 0a47 	vmov.f32	s0, s14
 8001aee:	f7ff f83b 	bl	8000b68 <rotate_joint_3>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4a4d      	ldr	r2, [pc, #308]	@ (8001c2c <HAL_UART_RxCpltCallback+0x540>)
 8001af6:	6093      	str	r3, [r2, #8]
			rotate_diff_joint(abs(ang4), abs(ang5), ang4 < 0 ? 0 : 1,
 8001af8:	4b49      	ldr	r3, [pc, #292]	@ (8001c20 <HAL_UART_RxCpltCallback+0x534>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b02:	ee17 3a90 	vmov	r3, s15
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	bfb8      	it	lt
 8001b0a:	425b      	neglt	r3, r3
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b14:	4b43      	ldr	r3, [pc, #268]	@ (8001c24 <HAL_UART_RxCpltCallback+0x538>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b1e:	ee17 3a90 	vmov	r3, s15
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	bfb8      	it	lt
 8001b26:	425b      	neglt	r3, r3
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b30:	4b3b      	ldr	r3, [pc, #236]	@ (8001c20 <HAL_UART_RxCpltCallback+0x534>)
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3e:	bf4c      	ite	mi
 8001b40:	2301      	movmi	r3, #1
 8001b42:	2300      	movpl	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	f083 0301 	eor.w	r3, r3, #1
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	b2d8      	uxtb	r0, r3
					ang5 < 0 ? 0 : 1, &sMicrosteps.ang4, &sMicrosteps.ang5);
 8001b4e:	4b35      	ldr	r3, [pc, #212]	@ (8001c24 <HAL_UART_RxCpltCallback+0x538>)
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5c:	bf4c      	ite	mi
 8001b5e:	2301      	movmi	r3, #1
 8001b60:	2300      	movpl	r3, #0
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	f083 0301 	eor.w	r3, r3, #1
 8001b68:	b2db      	uxtb	r3, r3
			rotate_diff_joint(abs(ang4), abs(ang5), ang4 < 0 ? 0 : 1,
 8001b6a:	b2d9      	uxtb	r1, r3
 8001b6c:	4b32      	ldr	r3, [pc, #200]	@ (8001c38 <HAL_UART_RxCpltCallback+0x54c>)
 8001b6e:	4a33      	ldr	r2, [pc, #204]	@ (8001c3c <HAL_UART_RxCpltCallback+0x550>)
 8001b70:	eef0 0a66 	vmov.f32	s1, s13
 8001b74:	eeb0 0a47 	vmov.f32	s0, s14
 8001b78:	f7ff f83a 	bl	8000bf0 <rotate_diff_joint>
			if (sMicrosteps.ang2 != 0) {
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c2c <HAL_UART_RxCpltCallback+0x540>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_UART_RxCpltCallback+0x4a0>
				calculate_times(&sMicrosteps, &sMictoStepsTime);
 8001b84:	492e      	ldr	r1, [pc, #184]	@ (8001c40 <HAL_UART_RxCpltCallback+0x554>)
 8001b86:	4829      	ldr	r0, [pc, #164]	@ (8001c2c <HAL_UART_RxCpltCallback+0x540>)
 8001b88:	f7ff f8d8 	bl	8000d3c <calculate_times>
			}
			sElapsedTime.tim1 = 0;
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c44 <HAL_UART_RxCpltCallback+0x558>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
			sElapsedTime.tim2 = 0;
 8001b92:	4b2c      	ldr	r3, [pc, #176]	@ (8001c44 <HAL_UART_RxCpltCallback+0x558>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	605a      	str	r2, [r3, #4]
			sElapsedTime.tim3 = 0;
 8001b98:	4b2a      	ldr	r3, [pc, #168]	@ (8001c44 <HAL_UART_RxCpltCallback+0x558>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
			sElapsedTime.tim4 = 0;
 8001b9e:	4b29      	ldr	r3, [pc, #164]	@ (8001c44 <HAL_UART_RxCpltCallback+0x558>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	60da      	str	r2, [r3, #12]
			sElapsedTime.tim5 = 0;
 8001ba4:	4b27      	ldr	r3, [pc, #156]	@ (8001c44 <HAL_UART_RxCpltCallback+0x558>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
			break;
 8001baa:	e031      	b.n	8001c10 <HAL_UART_RxCpltCallback+0x524>
		}

	} else if (RxData[0] == 0xAC) {
 8001bac:	4b26      	ldr	r3, [pc, #152]	@ (8001c48 <HAL_UART_RxCpltCallback+0x55c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2bac      	cmp	r3, #172	@ 0xac
 8001bb2:	d123      	bne.n	8001bfc <HAL_UART_RxCpltCallback+0x510>
		jointAngles.j1 = 0;
 8001bb4:	4b25      	ldr	r3, [pc, #148]	@ (8001c4c <HAL_UART_RxCpltCallback+0x560>)
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
		jointAngles.j2 = 0;
 8001bbc:	4b23      	ldr	r3, [pc, #140]	@ (8001c4c <HAL_UART_RxCpltCallback+0x560>)
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	605a      	str	r2, [r3, #4]
		jointAngles.j3 = 0;
 8001bc4:	4b21      	ldr	r3, [pc, #132]	@ (8001c4c <HAL_UART_RxCpltCallback+0x560>)
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
		jointAngles.j4 = 0;
 8001bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c4c <HAL_UART_RxCpltCallback+0x560>)
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
		jointAngles.j5 = 0;
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c4c <HAL_UART_RxCpltCallback+0x560>)
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
		sMictoStepsTime.ms1 = 80;
 8001bdc:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <HAL_UART_RxCpltCallback+0x554>)
 8001bde:	2250      	movs	r2, #80	@ 0x50
 8001be0:	601a      	str	r2, [r3, #0]
		sMictoStepsTime.ms2 = 20;
 8001be2:	4b17      	ldr	r3, [pc, #92]	@ (8001c40 <HAL_UART_RxCpltCallback+0x554>)
 8001be4:	2214      	movs	r2, #20
 8001be6:	605a      	str	r2, [r3, #4]
		sMictoStepsTime.ms3 = 20;
 8001be8:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <HAL_UART_RxCpltCallback+0x554>)
 8001bea:	2214      	movs	r2, #20
 8001bec:	609a      	str	r2, [r3, #8]
		sMictoStepsTime.ms4 = 120;
 8001bee:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <HAL_UART_RxCpltCallback+0x554>)
 8001bf0:	2278      	movs	r2, #120	@ 0x78
 8001bf2:	60da      	str	r2, [r3, #12]
		sMictoStepsTime.ms5 = 120;
 8001bf4:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <HAL_UART_RxCpltCallback+0x554>)
 8001bf6:	2278      	movs	r2, #120	@ 0x78
 8001bf8:	611a      	str	r2, [r3, #16]
	} else if (RxData[0] == 0xAD) {
		HAL_UART_Transmit(&huart2, (uint8_t*) &jointAngles, 20, 100);
	}
	return;
 8001bfa:	e00a      	b.n	8001c12 <HAL_UART_RxCpltCallback+0x526>
	} else if (RxData[0] == 0xAD) {
 8001bfc:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <HAL_UART_RxCpltCallback+0x55c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2bad      	cmp	r3, #173	@ 0xad
 8001c02:	d106      	bne.n	8001c12 <HAL_UART_RxCpltCallback+0x526>
		HAL_UART_Transmit(&huart2, (uint8_t*) &jointAngles, 20, 100);
 8001c04:	2364      	movs	r3, #100	@ 0x64
 8001c06:	2214      	movs	r2, #20
 8001c08:	4910      	ldr	r1, [pc, #64]	@ (8001c4c <HAL_UART_RxCpltCallback+0x560>)
 8001c0a:	4811      	ldr	r0, [pc, #68]	@ (8001c50 <HAL_UART_RxCpltCallback+0x564>)
 8001c0c:	f002 fd10 	bl	8004630 <HAL_UART_Transmit>
	return;
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
}
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200001ae 	.word	0x200001ae
 8001c20:	200001c0 	.word	0x200001c0
 8001c24:	200001c4 	.word	0x200001c4
 8001c28:	200001b4 	.word	0x200001b4
 8001c2c:	20000180 	.word	0x20000180
 8001c30:	200001b8 	.word	0x200001b8
 8001c34:	200001bc 	.word	0x200001bc
 8001c38:	20000190 	.word	0x20000190
 8001c3c:	2000018c 	.word	0x2000018c
 8001c40:	20000150 	.word	0x20000150
 8001c44:	20000164 	.word	0x20000164
 8001c48:	200001ac 	.word	0x200001ac
 8001c4c:	20000198 	.word	0x20000198
 8001c50:	200000c0 	.word	0x200000c0

08001c54 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c58:	b672      	cpsid	i
}
 8001c5a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <Error_Handler+0x8>

08001c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6193      	str	r3, [r2, #24]
 8001c72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	4a08      	ldr	r2, [pc, #32]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c88:	61d3      	str	r3, [r2, #28]
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a16      	ldr	r2, [pc, #88]	@ (8001d10 <HAL_TIM_Base_MspInit+0x68>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cba:	4b16      	ldr	r3, [pc, #88]	@ (8001d14 <HAL_TIM_Base_MspInit+0x6c>)
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	4a15      	ldr	r2, [pc, #84]	@ (8001d14 <HAL_TIM_Base_MspInit+0x6c>)
 8001cc0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cc4:	6193      	str	r3, [r2, #24]
 8001cc6:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <HAL_TIM_Base_MspInit+0x6c>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001cd2:	e018      	b.n	8001d06 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0f      	ldr	r2, [pc, #60]	@ (8001d18 <HAL_TIM_Base_MspInit+0x70>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d113      	bne.n	8001d06 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cde:	4b0d      	ldr	r3, [pc, #52]	@ (8001d14 <HAL_TIM_Base_MspInit+0x6c>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8001d14 <HAL_TIM_Base_MspInit+0x6c>)
 8001ce4:	f043 0310 	orr.w	r3, r3, #16
 8001ce8:	61d3      	str	r3, [r2, #28]
 8001cea:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <HAL_TIM_Base_MspInit+0x6c>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2036      	movs	r0, #54	@ 0x36
 8001cfc:	f000 fa1b 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001d00:	2036      	movs	r0, #54	@ 0x36
 8001d02:	f000 fa34 	bl	800216e <HAL_NVIC_EnableIRQ>
}
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40012c00 	.word	0x40012c00
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40001000 	.word	0x40001000

08001d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	@ 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1c      	ldr	r2, [pc, #112]	@ (8001dac <HAL_UART_MspInit+0x90>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d131      	bne.n	8001da2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001db0 <HAL_UART_MspInit+0x94>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	4a1b      	ldr	r2, [pc, #108]	@ (8001db0 <HAL_UART_MspInit+0x94>)
 8001d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d48:	61d3      	str	r3, [r2, #28]
 8001d4a:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <HAL_UART_MspInit+0x94>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	4b16      	ldr	r3, [pc, #88]	@ (8001db0 <HAL_UART_MspInit+0x94>)
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	4a15      	ldr	r2, [pc, #84]	@ (8001db0 <HAL_UART_MspInit+0x94>)
 8001d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d60:	6153      	str	r3, [r2, #20]
 8001d62:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <HAL_UART_MspInit+0x94>)
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001d6e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d80:	2307      	movs	r3, #7
 8001d82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d8e:	f000 fa85 	bl	800229c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2100      	movs	r1, #0
 8001d96:	2026      	movs	r0, #38	@ 0x26
 8001d98:	f000 f9cd 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d9c:	2026      	movs	r0, #38	@ 0x26
 8001d9e:	f000 f9e6 	bl	800216e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001da2:	bf00      	nop
 8001da4:	3728      	adds	r7, #40	@ 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40004400 	.word	0x40004400
 8001db0:	40021000 	.word	0x40021000

08001db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <NMI_Handler+0x4>

08001dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <HardFault_Handler+0x4>

08001dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <MemManage_Handler+0x4>

08001dcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <BusFault_Handler+0x4>

08001dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <UsageFault_Handler+0x4>

08001ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e0a:	f000 f899 	bl	8001f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e18:	4802      	ldr	r0, [pc, #8]	@ (8001e24 <USART2_IRQHandler+0x10>)
 8001e1a:	f002 fcd7 	bl	80047cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200000c0 	.word	0x200000c0

08001e28 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e2c:	4802      	ldr	r0, [pc, #8]	@ (8001e38 <TIM6_DAC1_IRQHandler+0x10>)
 8001e2e:	f002 f809 	bl	8003e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000074 	.word	0x20000074

08001e3c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e40:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <SystemInit+0x20>)
 8001e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e46:	4a05      	ldr	r2, [pc, #20]	@ (8001e5c <SystemInit+0x20>)
 8001e48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e98 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e64:	f7ff ffea 	bl	8001e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e68:	480c      	ldr	r0, [pc, #48]	@ (8001e9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e6a:	490d      	ldr	r1, [pc, #52]	@ (8001ea0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea4 <LoopForever+0xe>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e70:	e002      	b.n	8001e78 <LoopCopyDataInit>

08001e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e76:	3304      	adds	r3, #4

08001e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e7c:	d3f9      	bcc.n	8001e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e80:	4c0a      	ldr	r4, [pc, #40]	@ (8001eac <LoopForever+0x16>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e84:	e001      	b.n	8001e8a <LoopFillZerobss>

08001e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e88:	3204      	adds	r2, #4

08001e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e8c:	d3fb      	bcc.n	8001e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e8e:	f003 fdb5 	bl	80059fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e92:	f7fe ffe1 	bl	8000e58 <main>

08001e96 <LoopForever>:

LoopForever:
    b LoopForever
 8001e96:	e7fe      	b.n	8001e96 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e98:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ea4:	08005a9c 	.word	0x08005a9c
  ldr r2, =_sbss
 8001ea8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001eac:	200001cc 	.word	0x200001cc

08001eb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001eb0:	e7fe      	b.n	8001eb0 <ADC1_2_IRQHandler>
	...

08001eb4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb8:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <HAL_Init+0x28>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a07      	ldr	r2, [pc, #28]	@ (8001edc <HAL_Init+0x28>)
 8001ebe:	f043 0310 	orr.w	r3, r3, #16
 8001ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec4:	2003      	movs	r0, #3
 8001ec6:	f000 f92b 	bl	8002120 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f000 f808 	bl	8001ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed0:	f7ff fec6 	bl	8001c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40022000 	.word	0x40022000

08001ee0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee8:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <HAL_InitTick+0x54>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b12      	ldr	r3, [pc, #72]	@ (8001f38 <HAL_InitTick+0x58>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f943 	bl	800218a <HAL_SYSTICK_Config>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00e      	b.n	8001f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b0f      	cmp	r3, #15
 8001f12:	d80a      	bhi.n	8001f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f14:	2200      	movs	r2, #0
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	f000 f90b 	bl	8002136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f20:	4a06      	ldr	r2, [pc, #24]	@ (8001f3c <HAL_InitTick+0x5c>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	e000      	b.n	8001f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000000 	.word	0x20000000
 8001f38:	20000008 	.word	0x20000008
 8001f3c:	20000004 	.word	0x20000004

08001f40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f44:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_IncTick+0x20>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <HAL_IncTick+0x24>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4413      	add	r3, r2
 8001f50:	4a04      	ldr	r2, [pc, #16]	@ (8001f64 <HAL_IncTick+0x24>)
 8001f52:	6013      	str	r3, [r2, #0]
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000008 	.word	0x20000008
 8001f64:	200001c8 	.word	0x200001c8

08001f68 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001f6c:	4b03      	ldr	r3, [pc, #12]	@ (8001f7c <HAL_GetTick+0x14>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	200001c8 	.word	0x200001c8

08001f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f90:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb2:	4a04      	ldr	r2, [pc, #16]	@ (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	60d3      	str	r3, [r2, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fcc:	4b04      	ldr	r3, [pc, #16]	@ (8001fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	f003 0307 	and.w	r3, r3, #7
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	db0b      	blt.n	800200e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	f003 021f 	and.w	r2, r3, #31
 8001ffc:	4907      	ldr	r1, [pc, #28]	@ (800201c <__NVIC_EnableIRQ+0x38>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	095b      	lsrs	r3, r3, #5
 8002004:	2001      	movs	r0, #1
 8002006:	fa00 f202 	lsl.w	r2, r0, r2
 800200a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000e100 	.word	0xe000e100

08002020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	2b00      	cmp	r3, #0
 8002032:	db0a      	blt.n	800204a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	490c      	ldr	r1, [pc, #48]	@ (800206c <__NVIC_SetPriority+0x4c>)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	440b      	add	r3, r1
 8002044:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002048:	e00a      	b.n	8002060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4908      	ldr	r1, [pc, #32]	@ (8002070 <__NVIC_SetPriority+0x50>)
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	3b04      	subs	r3, #4
 8002058:	0112      	lsls	r2, r2, #4
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	440b      	add	r3, r1
 800205e:	761a      	strb	r2, [r3, #24]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000e100 	.word	0xe000e100
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	@ 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f1c3 0307 	rsb	r3, r3, #7
 800208e:	2b04      	cmp	r3, #4
 8002090:	bf28      	it	cs
 8002092:	2304      	movcs	r3, #4
 8002094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3304      	adds	r3, #4
 800209a:	2b06      	cmp	r3, #6
 800209c:	d902      	bls.n	80020a4 <NVIC_EncodePriority+0x30>
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3b03      	subs	r3, #3
 80020a2:	e000      	b.n	80020a6 <NVIC_EncodePriority+0x32>
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43da      	mvns	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	401a      	ands	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020bc:	f04f 31ff 	mov.w	r1, #4294967295
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	43d9      	mvns	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	4313      	orrs	r3, r2
         );
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3724      	adds	r7, #36	@ 0x24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020ec:	d301      	bcc.n	80020f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00f      	b.n	8002112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f2:	4a0a      	ldr	r2, [pc, #40]	@ (800211c <SysTick_Config+0x40>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fa:	210f      	movs	r1, #15
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002100:	f7ff ff8e 	bl	8002020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002104:	4b05      	ldr	r3, [pc, #20]	@ (800211c <SysTick_Config+0x40>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210a:	4b04      	ldr	r3, [pc, #16]	@ (800211c <SysTick_Config+0x40>)
 800210c:	2207      	movs	r2, #7
 800210e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	e000e010 	.word	0xe000e010

08002120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ff29 	bl	8001f80 <__NVIC_SetPriorityGrouping>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002148:	f7ff ff3e 	bl	8001fc8 <__NVIC_GetPriorityGrouping>
 800214c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	6978      	ldr	r0, [r7, #20]
 8002154:	f7ff ff8e 	bl	8002074 <NVIC_EncodePriority>
 8002158:	4602      	mov	r2, r0
 800215a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff5d 	bl	8002020 <__NVIC_SetPriority>
}
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff31 	bl	8001fe4 <__NVIC_EnableIRQ>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ffa2 	bl	80020dc <SysTick_Config>
 8002198:	4603      	mov	r3, r0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e02e      	b.n	8002212 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d008      	beq.n	80021d0 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2204      	movs	r2, #4
 80021c2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e020      	b.n	8002212 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 020e 	bic.w	r2, r2, #14
 80021de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f8:	2101      	movs	r1, #1
 80021fa:	fa01 f202 	lsl.w	r2, r1, r2
 80021fe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002230:	2b02      	cmp	r3, #2
 8002232:	d005      	beq.n	8002240 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2204      	movs	r2, #4
 8002238:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
 800223e:	e027      	b.n	8002290 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 020e 	bic.w	r2, r2, #14
 800224e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002268:	2101      	movs	r1, #1
 800226a:	fa01 f202 	lsl.w	r2, r1, r2
 800226e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	4798      	blx	r3
    }
  }
  return status;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800229c:	b480      	push	{r7}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022aa:	e14e      	b.n	800254a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	2101      	movs	r1, #1
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	fa01 f303 	lsl.w	r3, r1, r3
 80022b8:	4013      	ands	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 8140 	beq.w	8002544 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d005      	beq.n	80022dc <HAL_GPIO_Init+0x40>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d130      	bne.n	800233e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002312:	2201      	movs	r2, #1
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	091b      	lsrs	r3, r3, #4
 8002328:	f003 0201 	and.w	r2, r3, #1
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b03      	cmp	r3, #3
 8002348:	d017      	beq.n	800237a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d123      	bne.n	80023ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	08da      	lsrs	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3208      	adds	r2, #8
 800238e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002392:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	220f      	movs	r2, #15
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	08da      	lsrs	r2, r3, #3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3208      	adds	r2, #8
 80023c8:	6939      	ldr	r1, [r7, #16]
 80023ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	2203      	movs	r2, #3
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0203 	and.w	r2, r3, #3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 809a 	beq.w	8002544 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002410:	4b55      	ldr	r3, [pc, #340]	@ (8002568 <HAL_GPIO_Init+0x2cc>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	4a54      	ldr	r2, [pc, #336]	@ (8002568 <HAL_GPIO_Init+0x2cc>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6193      	str	r3, [r2, #24]
 800241c:	4b52      	ldr	r3, [pc, #328]	@ (8002568 <HAL_GPIO_Init+0x2cc>)
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002428:	4a50      	ldr	r2, [pc, #320]	@ (800256c <HAL_GPIO_Init+0x2d0>)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	3302      	adds	r3, #2
 8002430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	220f      	movs	r2, #15
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002452:	d013      	beq.n	800247c <HAL_GPIO_Init+0x1e0>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a46      	ldr	r2, [pc, #280]	@ (8002570 <HAL_GPIO_Init+0x2d4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d00d      	beq.n	8002478 <HAL_GPIO_Init+0x1dc>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a45      	ldr	r2, [pc, #276]	@ (8002574 <HAL_GPIO_Init+0x2d8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d007      	beq.n	8002474 <HAL_GPIO_Init+0x1d8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a44      	ldr	r2, [pc, #272]	@ (8002578 <HAL_GPIO_Init+0x2dc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d101      	bne.n	8002470 <HAL_GPIO_Init+0x1d4>
 800246c:	2303      	movs	r3, #3
 800246e:	e006      	b.n	800247e <HAL_GPIO_Init+0x1e2>
 8002470:	2305      	movs	r3, #5
 8002472:	e004      	b.n	800247e <HAL_GPIO_Init+0x1e2>
 8002474:	2302      	movs	r3, #2
 8002476:	e002      	b.n	800247e <HAL_GPIO_Init+0x1e2>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <HAL_GPIO_Init+0x1e2>
 800247c:	2300      	movs	r3, #0
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	f002 0203 	and.w	r2, r2, #3
 8002484:	0092      	lsls	r2, r2, #2
 8002486:	4093      	lsls	r3, r2
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800248e:	4937      	ldr	r1, [pc, #220]	@ (800256c <HAL_GPIO_Init+0x2d0>)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	089b      	lsrs	r3, r3, #2
 8002494:	3302      	adds	r3, #2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800249c:	4b37      	ldr	r3, [pc, #220]	@ (800257c <HAL_GPIO_Init+0x2e0>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024c0:	4a2e      	ldr	r2, [pc, #184]	@ (800257c <HAL_GPIO_Init+0x2e0>)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024c6:	4b2d      	ldr	r3, [pc, #180]	@ (800257c <HAL_GPIO_Init+0x2e0>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4013      	ands	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024ea:	4a24      	ldr	r2, [pc, #144]	@ (800257c <HAL_GPIO_Init+0x2e0>)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024f0:	4b22      	ldr	r3, [pc, #136]	@ (800257c <HAL_GPIO_Init+0x2e0>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002514:	4a19      	ldr	r2, [pc, #100]	@ (800257c <HAL_GPIO_Init+0x2e0>)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800251a:	4b18      	ldr	r3, [pc, #96]	@ (800257c <HAL_GPIO_Init+0x2e0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800253e:	4a0f      	ldr	r2, [pc, #60]	@ (800257c <HAL_GPIO_Init+0x2e0>)
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	3301      	adds	r3, #1
 8002548:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	f47f aea9 	bne.w	80022ac <HAL_GPIO_Init+0x10>
  }
}
 800255a:	bf00      	nop
 800255c:	bf00      	nop
 800255e:	371c      	adds	r7, #28
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	40021000 	.word	0x40021000
 800256c:	40010000 	.word	0x40010000
 8002570:	48000400 	.word	0x48000400
 8002574:	48000800 	.word	0x48000800
 8002578:	48000c00 	.word	0x48000c00
 800257c:	40010400 	.word	0x40010400

08002580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	807b      	strh	r3, [r7, #2]
 800258c:	4613      	mov	r3, r2
 800258e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002590:	787b      	ldrb	r3, [r7, #1]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002596:	887a      	ldrh	r2, [r7, #2]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800259c:	e002      	b.n	80025a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800259e:	887a      	ldrh	r2, [r7, #2]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4013      	ands	r3, r2
 80025c8:	041a      	lsls	r2, r3, #16
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	43d9      	mvns	r1, r3
 80025ce:	887b      	ldrh	r3, [r7, #2]
 80025d0:	400b      	ands	r3, r1
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	619a      	str	r2, [r3, #24]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025f4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	f001 b823 	b.w	8003650 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 817d 	beq.w	800291a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002620:	4bbc      	ldr	r3, [pc, #752]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b04      	cmp	r3, #4
 800262a:	d00c      	beq.n	8002646 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800262c:	4bb9      	ldr	r3, [pc, #740]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b08      	cmp	r3, #8
 8002636:	d15c      	bne.n	80026f2 <HAL_RCC_OscConfig+0x10e>
 8002638:	4bb6      	ldr	r3, [pc, #728]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002644:	d155      	bne.n	80026f2 <HAL_RCC_OscConfig+0x10e>
 8002646:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800264a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800265a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265e:	fab3 f383 	clz	r3, r3
 8002662:	b2db      	uxtb	r3, r3
 8002664:	095b      	lsrs	r3, r3, #5
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b01      	cmp	r3, #1
 8002670:	d102      	bne.n	8002678 <HAL_RCC_OscConfig+0x94>
 8002672:	4ba8      	ldr	r3, [pc, #672]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	e015      	b.n	80026a4 <HAL_RCC_OscConfig+0xc0>
 8002678:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800267c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002684:	fa93 f3a3 	rbit	r3, r3
 8002688:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800268c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002690:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002694:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80026a0:	4b9c      	ldr	r3, [pc, #624]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026a8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80026ac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80026b0:	fa92 f2a2 	rbit	r2, r2
 80026b4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80026b8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80026bc:	fab2 f282 	clz	r2, r2
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	f042 0220 	orr.w	r2, r2, #32
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	f002 021f 	and.w	r2, r2, #31
 80026cc:	2101      	movs	r1, #1
 80026ce:	fa01 f202 	lsl.w	r2, r1, r2
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 811f 	beq.w	8002918 <HAL_RCC_OscConfig+0x334>
 80026da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f040 8116 	bne.w	8002918 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f000 bfaf 	b.w	8003650 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002702:	d106      	bne.n	8002712 <HAL_RCC_OscConfig+0x12e>
 8002704:	4b83      	ldr	r3, [pc, #524]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a82      	ldr	r2, [pc, #520]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 800270a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	e036      	b.n	8002780 <HAL_RCC_OscConfig+0x19c>
 8002712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002716:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10c      	bne.n	800273c <HAL_RCC_OscConfig+0x158>
 8002722:	4b7c      	ldr	r3, [pc, #496]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a7b      	ldr	r2, [pc, #492]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 8002728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	4b79      	ldr	r3, [pc, #484]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a78      	ldr	r2, [pc, #480]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 8002734:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	e021      	b.n	8002780 <HAL_RCC_OscConfig+0x19c>
 800273c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002740:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800274c:	d10c      	bne.n	8002768 <HAL_RCC_OscConfig+0x184>
 800274e:	4b71      	ldr	r3, [pc, #452]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a70      	ldr	r2, [pc, #448]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 8002754:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	4b6e      	ldr	r3, [pc, #440]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a6d      	ldr	r2, [pc, #436]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 8002760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	e00b      	b.n	8002780 <HAL_RCC_OscConfig+0x19c>
 8002768:	4b6a      	ldr	r3, [pc, #424]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a69      	ldr	r2, [pc, #420]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 800276e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	4b67      	ldr	r3, [pc, #412]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a66      	ldr	r2, [pc, #408]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 800277a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800277e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002780:	4b64      	ldr	r3, [pc, #400]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 8002782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002784:	f023 020f 	bic.w	r2, r3, #15
 8002788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	495f      	ldr	r1, [pc, #380]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 8002796:	4313      	orrs	r3, r2
 8002798:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800279a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d059      	beq.n	800285e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7ff fbdd 	bl	8001f68 <HAL_GetTick>
 80027ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b4:	f7ff fbd8 	bl	8001f68 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b64      	cmp	r3, #100	@ 0x64
 80027c2:	d902      	bls.n	80027ca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	f000 bf43 	b.w	8003650 <HAL_RCC_OscConfig+0x106c>
 80027ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027ce:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80027de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	095b      	lsrs	r3, r3, #5
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d102      	bne.n	80027fc <HAL_RCC_OscConfig+0x218>
 80027f6:	4b47      	ldr	r3, [pc, #284]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	e015      	b.n	8002828 <HAL_RCC_OscConfig+0x244>
 80027fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002800:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002810:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002814:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002818:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800281c:	fa93 f3a3 	rbit	r3, r3
 8002820:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002824:	4b3b      	ldr	r3, [pc, #236]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 8002826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002828:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800282c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002830:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002834:	fa92 f2a2 	rbit	r2, r2
 8002838:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800283c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002840:	fab2 f282 	clz	r2, r2
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	f042 0220 	orr.w	r2, r2, #32
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	f002 021f 	and.w	r2, r2, #31
 8002850:	2101      	movs	r1, #1
 8002852:	fa01 f202 	lsl.w	r2, r1, r2
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ab      	beq.n	80027b4 <HAL_RCC_OscConfig+0x1d0>
 800285c:	e05d      	b.n	800291a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285e:	f7ff fb83 	bl	8001f68 <HAL_GetTick>
 8002862:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002866:	e00a      	b.n	800287e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002868:	f7ff fb7e 	bl	8001f68 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b64      	cmp	r3, #100	@ 0x64
 8002876:	d902      	bls.n	800287e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	f000 bee9 	b.w	8003650 <HAL_RCC_OscConfig+0x106c>
 800287e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002882:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002892:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	095b      	lsrs	r3, r3, #5
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d102      	bne.n	80028b0 <HAL_RCC_OscConfig+0x2cc>
 80028aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	e015      	b.n	80028dc <HAL_RCC_OscConfig+0x2f8>
 80028b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028b4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80028c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028c8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80028cc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80028d0:	fa93 f3a3 	rbit	r3, r3
 80028d4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80028d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002914 <HAL_RCC_OscConfig+0x330>)
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028e0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80028e4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80028e8:	fa92 f2a2 	rbit	r2, r2
 80028ec:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80028f0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80028f4:	fab2 f282 	clz	r2, r2
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	f042 0220 	orr.w	r2, r2, #32
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	f002 021f 	and.w	r2, r2, #31
 8002904:	2101      	movs	r1, #1
 8002906:	fa01 f202 	lsl.w	r2, r1, r2
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1ab      	bne.n	8002868 <HAL_RCC_OscConfig+0x284>
 8002910:	e003      	b.n	800291a <HAL_RCC_OscConfig+0x336>
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 817d 	beq.w	8002c2a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002930:	4ba6      	ldr	r3, [pc, #664]	@ (8002bcc <HAL_RCC_OscConfig+0x5e8>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 030c 	and.w	r3, r3, #12
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00b      	beq.n	8002954 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800293c:	4ba3      	ldr	r3, [pc, #652]	@ (8002bcc <HAL_RCC_OscConfig+0x5e8>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b08      	cmp	r3, #8
 8002946:	d172      	bne.n	8002a2e <HAL_RCC_OscConfig+0x44a>
 8002948:	4ba0      	ldr	r3, [pc, #640]	@ (8002bcc <HAL_RCC_OscConfig+0x5e8>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d16c      	bne.n	8002a2e <HAL_RCC_OscConfig+0x44a>
 8002954:	2302      	movs	r3, #2
 8002956:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002966:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d102      	bne.n	8002984 <HAL_RCC_OscConfig+0x3a0>
 800297e:	4b93      	ldr	r3, [pc, #588]	@ (8002bcc <HAL_RCC_OscConfig+0x5e8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	e013      	b.n	80029ac <HAL_RCC_OscConfig+0x3c8>
 8002984:	2302      	movs	r3, #2
 8002986:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002996:	2302      	movs	r3, #2
 8002998:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800299c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80029a8:	4b88      	ldr	r3, [pc, #544]	@ (8002bcc <HAL_RCC_OscConfig+0x5e8>)
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	2202      	movs	r2, #2
 80029ae:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80029b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80029b6:	fa92 f2a2 	rbit	r2, r2
 80029ba:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80029be:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80029c2:	fab2 f282 	clz	r2, r2
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	f042 0220 	orr.w	r2, r2, #32
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	f002 021f 	and.w	r2, r2, #31
 80029d2:	2101      	movs	r1, #1
 80029d4:	fa01 f202 	lsl.w	r2, r1, r2
 80029d8:	4013      	ands	r3, r2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCC_OscConfig+0x410>
 80029de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d002      	beq.n	80029f4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	f000 be2e 	b.w	8003650 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f4:	4b75      	ldr	r3, [pc, #468]	@ (8002bcc <HAL_RCC_OscConfig+0x5e8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	21f8      	movs	r1, #248	@ 0xf8
 8002a0a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002a12:	fa91 f1a1 	rbit	r1, r1
 8002a16:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002a1a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002a1e:	fab1 f181 	clz	r1, r1
 8002a22:	b2c9      	uxtb	r1, r1
 8002a24:	408b      	lsls	r3, r1
 8002a26:	4969      	ldr	r1, [pc, #420]	@ (8002bcc <HAL_RCC_OscConfig+0x5e8>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2c:	e0fd      	b.n	8002c2a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8088 	beq.w	8002b50 <HAL_RCC_OscConfig+0x56c>
 8002a40:	2301      	movs	r3, #1
 8002a42:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002a52:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a60:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	461a      	mov	r2, r3
 8002a68:	2301      	movs	r3, #1
 8002a6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7ff fa7c 	bl	8001f68 <HAL_GetTick>
 8002a70:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a74:	e00a      	b.n	8002a8c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a76:	f7ff fa77 	bl	8001f68 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d902      	bls.n	8002a8c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	f000 bde2 	b.w	8003650 <HAL_RCC_OscConfig+0x106c>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002a9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	095b      	lsrs	r3, r3, #5
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d102      	bne.n	8002abc <HAL_RCC_OscConfig+0x4d8>
 8002ab6:	4b45      	ldr	r3, [pc, #276]	@ (8002bcc <HAL_RCC_OscConfig+0x5e8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	e013      	b.n	8002ae4 <HAL_RCC_OscConfig+0x500>
 8002abc:	2302      	movs	r3, #2
 8002abe:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002ace:	2302      	movs	r3, #2
 8002ad0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002ad4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002ae0:	4b3a      	ldr	r3, [pc, #232]	@ (8002bcc <HAL_RCC_OscConfig+0x5e8>)
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002aea:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002aee:	fa92 f2a2 	rbit	r2, r2
 8002af2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002af6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002afa:	fab2 f282 	clz	r2, r2
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	f042 0220 	orr.w	r2, r2, #32
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	f002 021f 	and.w	r2, r2, #31
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0af      	beq.n	8002a76 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b16:	4b2d      	ldr	r3, [pc, #180]	@ (8002bcc <HAL_RCC_OscConfig+0x5e8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	21f8      	movs	r1, #248	@ 0xf8
 8002b2c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002b34:	fa91 f1a1 	rbit	r1, r1
 8002b38:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002b3c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002b40:	fab1 f181 	clz	r1, r1
 8002b44:	b2c9      	uxtb	r1, r1
 8002b46:	408b      	lsls	r3, r1
 8002b48:	4920      	ldr	r1, [pc, #128]	@ (8002bcc <HAL_RCC_OscConfig+0x5e8>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]
 8002b4e:	e06c      	b.n	8002c2a <HAL_RCC_OscConfig+0x646>
 8002b50:	2301      	movs	r3, #1
 8002b52:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002b62:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b70:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	461a      	mov	r2, r3
 8002b78:	2300      	movs	r3, #0
 8002b7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7ff f9f4 	bl	8001f68 <HAL_GetTick>
 8002b80:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b86:	f7ff f9ef 	bl	8001f68 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d902      	bls.n	8002b9c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	f000 bd5a 	b.w	8003650 <HAL_RCC_OscConfig+0x106c>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d104      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x5ec>
 8002bc6:	4b01      	ldr	r3, [pc, #4]	@ (8002bcc <HAL_RCC_OscConfig+0x5e8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	e015      	b.n	8002bf8 <HAL_RCC_OscConfig+0x614>
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002be2:	2302      	movs	r3, #2
 8002be4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002be8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002bf4:	4bc8      	ldr	r3, [pc, #800]	@ (8002f18 <HAL_RCC_OscConfig+0x934>)
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002bfe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002c02:	fa92 f2a2 	rbit	r2, r2
 8002c06:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002c0a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002c0e:	fab2 f282 	clz	r2, r2
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	f042 0220 	orr.w	r2, r2, #32
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	f002 021f 	and.w	r2, r2, #31
 8002c1e:	2101      	movs	r1, #1
 8002c20:	fa01 f202 	lsl.w	r2, r1, r2
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1ad      	bne.n	8002b86 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8110 	beq.w	8002e60 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d079      	beq.n	8002d44 <HAL_RCC_OscConfig+0x760>
 8002c50:	2301      	movs	r3, #1
 8002c52:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4bab      	ldr	r3, [pc, #684]	@ (8002f1c <HAL_RCC_OscConfig+0x938>)
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	461a      	mov	r2, r3
 8002c76:	2301      	movs	r3, #1
 8002c78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7a:	f7ff f975 	bl	8001f68 <HAL_GetTick>
 8002c7e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c82:	e00a      	b.n	8002c9a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c84:	f7ff f970 	bl	8001f68 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d902      	bls.n	8002c9a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	f000 bcdb 	b.w	8003650 <HAL_RCC_OscConfig+0x106c>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cbc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	fa93 f2a3 	rbit	r2, r3
 8002cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002cd8:	2202      	movs	r2, #2
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	fa93 f2a3 	rbit	r2, r3
 8002cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002cf2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf4:	4b88      	ldr	r3, [pc, #544]	@ (8002f18 <HAL_RCC_OscConfig+0x934>)
 8002cf6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d00:	2102      	movs	r1, #2
 8002d02:	6019      	str	r1, [r3, #0]
 8002d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d08:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	fa93 f1a3 	rbit	r1, r3
 8002d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d16:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002d1a:	6019      	str	r1, [r3, #0]
  return result;
 8002d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d20:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	2101      	movs	r1, #1
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0a0      	beq.n	8002c84 <HAL_RCC_OscConfig+0x6a0>
 8002d42:	e08d      	b.n	8002e60 <HAL_RCC_OscConfig+0x87c>
 8002d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d48:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d54:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	fa93 f2a3 	rbit	r2, r3
 8002d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d62:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d66:	601a      	str	r2, [r3, #0]
  return result;
 8002d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d70:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b68      	ldr	r3, [pc, #416]	@ (8002f1c <HAL_RCC_OscConfig+0x938>)
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	461a      	mov	r2, r3
 8002d82:	2300      	movs	r3, #0
 8002d84:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d86:	f7ff f8ef 	bl	8001f68 <HAL_GetTick>
 8002d8a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d90:	f7ff f8ea 	bl	8001f68 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d902      	bls.n	8002da6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	f000 bc55 	b.w	8003650 <HAL_RCC_OscConfig+0x106c>
 8002da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002daa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002dae:	2202      	movs	r2, #2
 8002db0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	fa93 f2a3 	rbit	r2, r3
 8002dc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dda:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	fa93 f2a3 	rbit	r2, r3
 8002de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002df6:	2202      	movs	r2, #2
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	fa93 f2a3 	rbit	r2, r3
 8002e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002e10:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e12:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <HAL_RCC_OscConfig+0x934>)
 8002e14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e1a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002e1e:	2102      	movs	r1, #2
 8002e20:	6019      	str	r1, [r3, #0]
 8002e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e26:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	fa93 f1a3 	rbit	r1, r3
 8002e30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e34:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e38:	6019      	str	r1, [r3, #0]
  return result;
 8002e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	fab3 f383 	clz	r3, r3
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f003 031f 	and.w	r3, r3, #31
 8002e54:	2101      	movs	r1, #1
 8002e56:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d197      	bne.n	8002d90 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 81a1 	beq.w	80031b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7c:	4b26      	ldr	r3, [pc, #152]	@ (8002f18 <HAL_RCC_OscConfig+0x934>)
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d116      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e88:	4b23      	ldr	r3, [pc, #140]	@ (8002f18 <HAL_RCC_OscConfig+0x934>)
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	4a22      	ldr	r2, [pc, #136]	@ (8002f18 <HAL_RCC_OscConfig+0x934>)
 8002e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e92:	61d3      	str	r3, [r2, #28]
 8002e94:	4b20      	ldr	r3, [pc, #128]	@ (8002f18 <HAL_RCC_OscConfig+0x934>)
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002e9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eaa:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002eae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f20 <HAL_RCC_OscConfig+0x93c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d11a      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec2:	4b17      	ldr	r3, [pc, #92]	@ (8002f20 <HAL_RCC_OscConfig+0x93c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a16      	ldr	r2, [pc, #88]	@ (8002f20 <HAL_RCC_OscConfig+0x93c>)
 8002ec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ecc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ece:	f7ff f84b 	bl	8001f68 <HAL_GetTick>
 8002ed2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed6:	e009      	b.n	8002eec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed8:	f7ff f846 	bl	8001f68 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b64      	cmp	r3, #100	@ 0x64
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e3b1      	b.n	8003650 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eec:	4b0c      	ldr	r3, [pc, #48]	@ (8002f20 <HAL_RCC_OscConfig+0x93c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0ef      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d10d      	bne.n	8002f24 <HAL_RCC_OscConfig+0x940>
 8002f08:	4b03      	ldr	r3, [pc, #12]	@ (8002f18 <HAL_RCC_OscConfig+0x934>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4a02      	ldr	r2, [pc, #8]	@ (8002f18 <HAL_RCC_OscConfig+0x934>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	6213      	str	r3, [r2, #32]
 8002f14:	e03c      	b.n	8002f90 <HAL_RCC_OscConfig+0x9ac>
 8002f16:	bf00      	nop
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	10908120 	.word	0x10908120
 8002f20:	40007000 	.word	0x40007000
 8002f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10c      	bne.n	8002f4e <HAL_RCC_OscConfig+0x96a>
 8002f34:	4bc1      	ldr	r3, [pc, #772]	@ (800323c <HAL_RCC_OscConfig+0xc58>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	4ac0      	ldr	r2, [pc, #768]	@ (800323c <HAL_RCC_OscConfig+0xc58>)
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
 8002f3e:	6213      	str	r3, [r2, #32]
 8002f40:	4bbe      	ldr	r3, [pc, #760]	@ (800323c <HAL_RCC_OscConfig+0xc58>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	4abd      	ldr	r2, [pc, #756]	@ (800323c <HAL_RCC_OscConfig+0xc58>)
 8002f46:	f023 0304 	bic.w	r3, r3, #4
 8002f4a:	6213      	str	r3, [r2, #32]
 8002f4c:	e020      	b.n	8002f90 <HAL_RCC_OscConfig+0x9ac>
 8002f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	2b05      	cmp	r3, #5
 8002f5c:	d10c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x994>
 8002f5e:	4bb7      	ldr	r3, [pc, #732]	@ (800323c <HAL_RCC_OscConfig+0xc58>)
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	4ab6      	ldr	r2, [pc, #728]	@ (800323c <HAL_RCC_OscConfig+0xc58>)
 8002f64:	f043 0304 	orr.w	r3, r3, #4
 8002f68:	6213      	str	r3, [r2, #32]
 8002f6a:	4bb4      	ldr	r3, [pc, #720]	@ (800323c <HAL_RCC_OscConfig+0xc58>)
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	4ab3      	ldr	r2, [pc, #716]	@ (800323c <HAL_RCC_OscConfig+0xc58>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	6213      	str	r3, [r2, #32]
 8002f76:	e00b      	b.n	8002f90 <HAL_RCC_OscConfig+0x9ac>
 8002f78:	4bb0      	ldr	r3, [pc, #704]	@ (800323c <HAL_RCC_OscConfig+0xc58>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	4aaf      	ldr	r2, [pc, #700]	@ (800323c <HAL_RCC_OscConfig+0xc58>)
 8002f7e:	f023 0301 	bic.w	r3, r3, #1
 8002f82:	6213      	str	r3, [r2, #32]
 8002f84:	4bad      	ldr	r3, [pc, #692]	@ (800323c <HAL_RCC_OscConfig+0xc58>)
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	4aac      	ldr	r2, [pc, #688]	@ (800323c <HAL_RCC_OscConfig+0xc58>)
 8002f8a:	f023 0304 	bic.w	r3, r3, #4
 8002f8e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 8081 	beq.w	80030a4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa2:	f7fe ffe1 	bl	8001f68 <HAL_GetTick>
 8002fa6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002faa:	e00b      	b.n	8002fc4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fac:	f7fe ffdc 	bl	8001f68 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e345      	b.n	8003650 <HAL_RCC_OscConfig+0x106c>
 8002fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002fcc:	2202      	movs	r2, #2
 8002fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	fa93 f2a3 	rbit	r2, r3
 8002fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	fa93 f2a3 	rbit	r2, r3
 8003002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003006:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800300a:	601a      	str	r2, [r3, #0]
  return result;
 800300c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003010:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003014:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	095b      	lsrs	r3, r3, #5
 800301e:	b2db      	uxtb	r3, r3
 8003020:	f043 0302 	orr.w	r3, r3, #2
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d102      	bne.n	8003030 <HAL_RCC_OscConfig+0xa4c>
 800302a:	4b84      	ldr	r3, [pc, #528]	@ (800323c <HAL_RCC_OscConfig+0xc58>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	e013      	b.n	8003058 <HAL_RCC_OscConfig+0xa74>
 8003030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003034:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003038:	2202      	movs	r2, #2
 800303a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003040:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	fa93 f2a3 	rbit	r2, r3
 800304a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800304e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	4b79      	ldr	r3, [pc, #484]	@ (800323c <HAL_RCC_OscConfig+0xc58>)
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800305c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003060:	2102      	movs	r1, #2
 8003062:	6011      	str	r1, [r2, #0]
 8003064:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003068:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	fa92 f1a2 	rbit	r1, r2
 8003072:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003076:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800307a:	6011      	str	r1, [r2, #0]
  return result;
 800307c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003080:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	fab2 f282 	clz	r2, r2
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	f002 021f 	and.w	r2, r2, #31
 8003096:	2101      	movs	r1, #1
 8003098:	fa01 f202 	lsl.w	r2, r1, r2
 800309c:	4013      	ands	r3, r2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d084      	beq.n	8002fac <HAL_RCC_OscConfig+0x9c8>
 80030a2:	e07f      	b.n	80031a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a4:	f7fe ff60 	bl	8001f68 <HAL_GetTick>
 80030a8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ac:	e00b      	b.n	80030c6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ae:	f7fe ff5b 	bl	8001f68 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e2c4      	b.n	8003650 <HAL_RCC_OscConfig+0x106c>
 80030c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ca:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80030ce:	2202      	movs	r2, #2
 80030d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	fa93 f2a3 	rbit	r2, r3
 80030e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ee:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80030f2:	2202      	movs	r2, #2
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	fa93 f2a3 	rbit	r2, r3
 8003104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003108:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800310c:	601a      	str	r2, [r3, #0]
  return result;
 800310e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003112:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003116:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003118:	fab3 f383 	clz	r3, r3
 800311c:	b2db      	uxtb	r3, r3
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f043 0302 	orr.w	r3, r3, #2
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d102      	bne.n	8003132 <HAL_RCC_OscConfig+0xb4e>
 800312c:	4b43      	ldr	r3, [pc, #268]	@ (800323c <HAL_RCC_OscConfig+0xc58>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	e013      	b.n	800315a <HAL_RCC_OscConfig+0xb76>
 8003132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003136:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800313a:	2202      	movs	r2, #2
 800313c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003142:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	fa93 f2a3 	rbit	r2, r3
 800314c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003150:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	4b39      	ldr	r3, [pc, #228]	@ (800323c <HAL_RCC_OscConfig+0xc58>)
 8003158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800315e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003162:	2102      	movs	r1, #2
 8003164:	6011      	str	r1, [r2, #0]
 8003166:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800316a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	fa92 f1a2 	rbit	r1, r2
 8003174:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003178:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800317c:	6011      	str	r1, [r2, #0]
  return result;
 800317e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003182:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	fab2 f282 	clz	r2, r2
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	f002 021f 	and.w	r2, r2, #31
 8003198:	2101      	movs	r1, #1
 800319a:	fa01 f202 	lsl.w	r2, r1, r2
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d184      	bne.n	80030ae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d105      	bne.n	80031b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ac:	4b23      	ldr	r3, [pc, #140]	@ (800323c <HAL_RCC_OscConfig+0xc58>)
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	4a22      	ldr	r2, [pc, #136]	@ (800323c <HAL_RCC_OscConfig+0xc58>)
 80031b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 8242 	beq.w	800364e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ca:	4b1c      	ldr	r3, [pc, #112]	@ (800323c <HAL_RCC_OscConfig+0xc58>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	f000 8213 	beq.w	80035fe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	f040 8162 	bne.w	80034ae <HAL_RCC_OscConfig+0xeca>
 80031ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ee:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80031f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	fa93 f2a3 	rbit	r2, r3
 8003206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800320e:	601a      	str	r2, [r3, #0]
  return result;
 8003210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003214:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003218:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
 8003220:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003224:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	461a      	mov	r2, r3
 800322c:	2300      	movs	r3, #0
 800322e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fe fe9a 	bl	8001f68 <HAL_GetTick>
 8003234:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003238:	e00c      	b.n	8003254 <HAL_RCC_OscConfig+0xc70>
 800323a:	bf00      	nop
 800323c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003240:	f7fe fe92 	bl	8001f68 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e1fd      	b.n	8003650 <HAL_RCC_OscConfig+0x106c>
 8003254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003258:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800325c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003266:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	fa93 f2a3 	rbit	r2, r3
 8003270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003274:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003278:	601a      	str	r2, [r3, #0]
  return result;
 800327a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003282:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003284:	fab3 f383 	clz	r3, r3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b01      	cmp	r3, #1
 8003296:	d102      	bne.n	800329e <HAL_RCC_OscConfig+0xcba>
 8003298:	4bb0      	ldr	r3, [pc, #704]	@ (800355c <HAL_RCC_OscConfig+0xf78>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	e027      	b.n	80032ee <HAL_RCC_OscConfig+0xd0a>
 800329e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80032a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	fa93 f2a3 	rbit	r2, r3
 80032ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032be:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80032cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	fa93 f2a3 	rbit	r2, r3
 80032e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	4b9c      	ldr	r3, [pc, #624]	@ (800355c <HAL_RCC_OscConfig+0xf78>)
 80032ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032f2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80032f6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80032fa:	6011      	str	r1, [r2, #0]
 80032fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003300:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	fa92 f1a2 	rbit	r1, r2
 800330a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800330e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003312:	6011      	str	r1, [r2, #0]
  return result;
 8003314:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003318:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	fab2 f282 	clz	r2, r2
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	f042 0220 	orr.w	r2, r2, #32
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	f002 021f 	and.w	r2, r2, #31
 800332e:	2101      	movs	r1, #1
 8003330:	fa01 f202 	lsl.w	r2, r1, r2
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d182      	bne.n	8003240 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800333a:	4b88      	ldr	r3, [pc, #544]	@ (800355c <HAL_RCC_OscConfig+0xf78>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003346:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800334e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003352:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	430b      	orrs	r3, r1
 800335c:	497f      	ldr	r1, [pc, #508]	@ (800355c <HAL_RCC_OscConfig+0xf78>)
 800335e:	4313      	orrs	r3, r2
 8003360:	604b      	str	r3, [r1, #4]
 8003362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003366:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800336a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800336e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003374:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	fa93 f2a3 	rbit	r2, r3
 800337e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003382:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003386:	601a      	str	r2, [r3, #0]
  return result;
 8003388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800338c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003390:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800339c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	461a      	mov	r2, r3
 80033a4:	2301      	movs	r3, #1
 80033a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a8:	f7fe fdde 	bl	8001f68 <HAL_GetTick>
 80033ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033b0:	e009      	b.n	80033c6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b2:	f7fe fdd9 	bl	8001f68 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e144      	b.n	8003650 <HAL_RCC_OscConfig+0x106c>
 80033c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80033ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	fa93 f2a3 	rbit	r2, r3
 80033e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80033ea:	601a      	str	r2, [r3, #0]
  return result;
 80033ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80033f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033f6:	fab3 f383 	clz	r3, r3
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	095b      	lsrs	r3, r3, #5
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b01      	cmp	r3, #1
 8003408:	d102      	bne.n	8003410 <HAL_RCC_OscConfig+0xe2c>
 800340a:	4b54      	ldr	r3, [pc, #336]	@ (800355c <HAL_RCC_OscConfig+0xf78>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	e027      	b.n	8003460 <HAL_RCC_OscConfig+0xe7c>
 8003410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003414:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003418:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800341c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003422:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	fa93 f2a3 	rbit	r2, r3
 800342c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003430:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800343a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800343e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003448:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	fa93 f2a3 	rbit	r2, r3
 8003452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003456:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	4b3f      	ldr	r3, [pc, #252]	@ (800355c <HAL_RCC_OscConfig+0xf78>)
 800345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003460:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003464:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003468:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800346c:	6011      	str	r1, [r2, #0]
 800346e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003472:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	fa92 f1a2 	rbit	r1, r2
 800347c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003480:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003484:	6011      	str	r1, [r2, #0]
  return result;
 8003486:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800348a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	fab2 f282 	clz	r2, r2
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	f042 0220 	orr.w	r2, r2, #32
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	f002 021f 	and.w	r2, r2, #31
 80034a0:	2101      	movs	r1, #1
 80034a2:	fa01 f202 	lsl.w	r2, r1, r2
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d082      	beq.n	80033b2 <HAL_RCC_OscConfig+0xdce>
 80034ac:	e0cf      	b.n	800364e <HAL_RCC_OscConfig+0x106a>
 80034ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80034b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	fa93 f2a3 	rbit	r2, r3
 80034ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ce:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80034d2:	601a      	str	r2, [r3, #0]
  return result;
 80034d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80034dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80034e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	461a      	mov	r2, r3
 80034f0:	2300      	movs	r3, #0
 80034f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7fe fd38 	bl	8001f68 <HAL_GetTick>
 80034f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034fc:	e009      	b.n	8003512 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fe:	f7fe fd33 	bl	8001f68 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e09e      	b.n	8003650 <HAL_RCC_OscConfig+0x106c>
 8003512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003516:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800351a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800351e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003524:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	fa93 f2a3 	rbit	r2, r3
 800352e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003532:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003536:	601a      	str	r2, [r3, #0]
  return result;
 8003538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003540:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003542:	fab3 f383 	clz	r3, r3
 8003546:	b2db      	uxtb	r3, r3
 8003548:	095b      	lsrs	r3, r3, #5
 800354a:	b2db      	uxtb	r3, r3
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d104      	bne.n	8003560 <HAL_RCC_OscConfig+0xf7c>
 8003556:	4b01      	ldr	r3, [pc, #4]	@ (800355c <HAL_RCC_OscConfig+0xf78>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	e029      	b.n	80035b0 <HAL_RCC_OscConfig+0xfcc>
 800355c:	40021000 	.word	0x40021000
 8003560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003564:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003568:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800356c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003572:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	fa93 f2a3 	rbit	r2, r3
 800357c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003580:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800358e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003598:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	fa93 f2a3 	rbit	r2, r3
 80035a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	4b2b      	ldr	r3, [pc, #172]	@ (800365c <HAL_RCC_OscConfig+0x1078>)
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035b4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80035b8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80035bc:	6011      	str	r1, [r2, #0]
 80035be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035c2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80035c6:	6812      	ldr	r2, [r2, #0]
 80035c8:	fa92 f1a2 	rbit	r1, r2
 80035cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035d0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80035d4:	6011      	str	r1, [r2, #0]
  return result;
 80035d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035da:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	fab2 f282 	clz	r2, r2
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	f042 0220 	orr.w	r2, r2, #32
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	f002 021f 	and.w	r2, r2, #31
 80035f0:	2101      	movs	r1, #1
 80035f2:	fa01 f202 	lsl.w	r2, r1, r2
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d180      	bne.n	80034fe <HAL_RCC_OscConfig+0xf1a>
 80035fc:	e027      	b.n	800364e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003602:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e01e      	b.n	8003650 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003612:	4b12      	ldr	r3, [pc, #72]	@ (800365c <HAL_RCC_OscConfig+0x1078>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800361a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800361e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003626:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	429a      	cmp	r2, r3
 8003630:	d10b      	bne.n	800364a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003632:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003636:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800363a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800363e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003646:	429a      	cmp	r2, r3
 8003648:	d001      	beq.n	800364e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000

08003660 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b09e      	sub	sp, #120	@ 0x78
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e162      	b.n	800393e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003678:	4b90      	ldr	r3, [pc, #576]	@ (80038bc <HAL_RCC_ClockConfig+0x25c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d910      	bls.n	80036a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003686:	4b8d      	ldr	r3, [pc, #564]	@ (80038bc <HAL_RCC_ClockConfig+0x25c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 0207 	bic.w	r2, r3, #7
 800368e:	498b      	ldr	r1, [pc, #556]	@ (80038bc <HAL_RCC_ClockConfig+0x25c>)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	4313      	orrs	r3, r2
 8003694:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003696:	4b89      	ldr	r3, [pc, #548]	@ (80038bc <HAL_RCC_ClockConfig+0x25c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d001      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e14a      	b.n	800393e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b4:	4b82      	ldr	r3, [pc, #520]	@ (80038c0 <HAL_RCC_ClockConfig+0x260>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	497f      	ldr	r1, [pc, #508]	@ (80038c0 <HAL_RCC_ClockConfig+0x260>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 80dc 	beq.w	800388c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d13c      	bne.n	8003756 <HAL_RCC_ClockConfig+0xf6>
 80036dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036e0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036e4:	fa93 f3a3 	rbit	r3, r3
 80036e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80036ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ec:	fab3 f383 	clz	r3, r3
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	f043 0301 	orr.w	r3, r3, #1
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d102      	bne.n	8003706 <HAL_RCC_ClockConfig+0xa6>
 8003700:	4b6f      	ldr	r3, [pc, #444]	@ (80038c0 <HAL_RCC_ClockConfig+0x260>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	e00f      	b.n	8003726 <HAL_RCC_ClockConfig+0xc6>
 8003706:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800370a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800370e:	fa93 f3a3 	rbit	r3, r3
 8003712:	667b      	str	r3, [r7, #100]	@ 0x64
 8003714:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003718:	663b      	str	r3, [r7, #96]	@ 0x60
 800371a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800371c:	fa93 f3a3 	rbit	r3, r3
 8003720:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003722:	4b67      	ldr	r3, [pc, #412]	@ (80038c0 <HAL_RCC_ClockConfig+0x260>)
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800372a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800372c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800372e:	fa92 f2a2 	rbit	r2, r2
 8003732:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003734:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003736:	fab2 f282 	clz	r2, r2
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	f042 0220 	orr.w	r2, r2, #32
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	f002 021f 	and.w	r2, r2, #31
 8003746:	2101      	movs	r1, #1
 8003748:	fa01 f202 	lsl.w	r2, r1, r2
 800374c:	4013      	ands	r3, r2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d17b      	bne.n	800384a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e0f3      	b.n	800393e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d13c      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x178>
 800375e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003762:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003764:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003766:	fa93 f3a3 	rbit	r3, r3
 800376a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800376c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376e:	fab3 f383 	clz	r3, r3
 8003772:	b2db      	uxtb	r3, r3
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	b2db      	uxtb	r3, r3
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b01      	cmp	r3, #1
 8003780:	d102      	bne.n	8003788 <HAL_RCC_ClockConfig+0x128>
 8003782:	4b4f      	ldr	r3, [pc, #316]	@ (80038c0 <HAL_RCC_ClockConfig+0x260>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	e00f      	b.n	80037a8 <HAL_RCC_ClockConfig+0x148>
 8003788:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800378c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003790:	fa93 f3a3 	rbit	r3, r3
 8003794:	647b      	str	r3, [r7, #68]	@ 0x44
 8003796:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800379a:	643b      	str	r3, [r7, #64]	@ 0x40
 800379c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800379e:	fa93 f3a3 	rbit	r3, r3
 80037a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037a4:	4b46      	ldr	r3, [pc, #280]	@ (80038c0 <HAL_RCC_ClockConfig+0x260>)
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037ac:	63ba      	str	r2, [r7, #56]	@ 0x38
 80037ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80037b0:	fa92 f2a2 	rbit	r2, r2
 80037b4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80037b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037b8:	fab2 f282 	clz	r2, r2
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	f042 0220 	orr.w	r2, r2, #32
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	f002 021f 	and.w	r2, r2, #31
 80037c8:	2101      	movs	r1, #1
 80037ca:	fa01 f202 	lsl.w	r2, r1, r2
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d13a      	bne.n	800384a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0b2      	b.n	800393e <HAL_RCC_ClockConfig+0x2de>
 80037d8:	2302      	movs	r3, #2
 80037da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037de:	fa93 f3a3 	rbit	r3, r3
 80037e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80037e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e6:	fab3 f383 	clz	r3, r3
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d102      	bne.n	8003800 <HAL_RCC_ClockConfig+0x1a0>
 80037fa:	4b31      	ldr	r3, [pc, #196]	@ (80038c0 <HAL_RCC_ClockConfig+0x260>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	e00d      	b.n	800381c <HAL_RCC_ClockConfig+0x1bc>
 8003800:	2302      	movs	r3, #2
 8003802:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003806:	fa93 f3a3 	rbit	r3, r3
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24
 800380c:	2302      	movs	r3, #2
 800380e:	623b      	str	r3, [r7, #32]
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	fa93 f3a3 	rbit	r3, r3
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	4b29      	ldr	r3, [pc, #164]	@ (80038c0 <HAL_RCC_ClockConfig+0x260>)
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	2202      	movs	r2, #2
 800381e:	61ba      	str	r2, [r7, #24]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	fa92 f2a2 	rbit	r2, r2
 8003826:	617a      	str	r2, [r7, #20]
  return result;
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	fab2 f282 	clz	r2, r2
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	f042 0220 	orr.w	r2, r2, #32
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	f002 021f 	and.w	r2, r2, #31
 800383a:	2101      	movs	r1, #1
 800383c:	fa01 f202 	lsl.w	r2, r1, r2
 8003840:	4013      	ands	r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e079      	b.n	800393e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800384a:	4b1d      	ldr	r3, [pc, #116]	@ (80038c0 <HAL_RCC_ClockConfig+0x260>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f023 0203 	bic.w	r2, r3, #3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	491a      	ldr	r1, [pc, #104]	@ (80038c0 <HAL_RCC_ClockConfig+0x260>)
 8003858:	4313      	orrs	r3, r2
 800385a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800385c:	f7fe fb84 	bl	8001f68 <HAL_GetTick>
 8003860:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003862:	e00a      	b.n	800387a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003864:	f7fe fb80 	bl	8001f68 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003872:	4293      	cmp	r3, r2
 8003874:	d901      	bls.n	800387a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e061      	b.n	800393e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387a:	4b11      	ldr	r3, [pc, #68]	@ (80038c0 <HAL_RCC_ClockConfig+0x260>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 020c 	and.w	r2, r3, #12
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	429a      	cmp	r2, r3
 800388a:	d1eb      	bne.n	8003864 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800388c:	4b0b      	ldr	r3, [pc, #44]	@ (80038bc <HAL_RCC_ClockConfig+0x25c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d214      	bcs.n	80038c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389a:	4b08      	ldr	r3, [pc, #32]	@ (80038bc <HAL_RCC_ClockConfig+0x25c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 0207 	bic.w	r2, r3, #7
 80038a2:	4906      	ldr	r1, [pc, #24]	@ (80038bc <HAL_RCC_ClockConfig+0x25c>)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038aa:	4b04      	ldr	r3, [pc, #16]	@ (80038bc <HAL_RCC_ClockConfig+0x25c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d005      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e040      	b.n	800393e <HAL_RCC_ClockConfig+0x2de>
 80038bc:	40022000 	.word	0x40022000
 80038c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003948 <HAL_RCC_ClockConfig+0x2e8>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	491a      	ldr	r1, [pc, #104]	@ (8003948 <HAL_RCC_ClockConfig+0x2e8>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ee:	4b16      	ldr	r3, [pc, #88]	@ (8003948 <HAL_RCC_ClockConfig+0x2e8>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4912      	ldr	r1, [pc, #72]	@ (8003948 <HAL_RCC_ClockConfig+0x2e8>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003902:	f000 f829 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8003906:	4601      	mov	r1, r0
 8003908:	4b0f      	ldr	r3, [pc, #60]	@ (8003948 <HAL_RCC_ClockConfig+0x2e8>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003910:	22f0      	movs	r2, #240	@ 0xf0
 8003912:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	fa92 f2a2 	rbit	r2, r2
 800391a:	60fa      	str	r2, [r7, #12]
  return result;
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	fab2 f282 	clz	r2, r2
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	40d3      	lsrs	r3, r2
 8003926:	4a09      	ldr	r2, [pc, #36]	@ (800394c <HAL_RCC_ClockConfig+0x2ec>)
 8003928:	5cd3      	ldrb	r3, [r2, r3]
 800392a:	fa21 f303 	lsr.w	r3, r1, r3
 800392e:	4a08      	ldr	r2, [pc, #32]	@ (8003950 <HAL_RCC_ClockConfig+0x2f0>)
 8003930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003932:	4b08      	ldr	r3, [pc, #32]	@ (8003954 <HAL_RCC_ClockConfig+0x2f4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe fad2 	bl	8001ee0 <HAL_InitTick>
  
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3778      	adds	r7, #120	@ 0x78
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	08005a5c 	.word	0x08005a5c
 8003950:	20000000 	.word	0x20000000
 8003954:	20000004 	.word	0x20000004

08003958 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	2300      	movs	r3, #0
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	2300      	movs	r3, #0
 800396c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003972:	4b1e      	ldr	r3, [pc, #120]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x94>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b04      	cmp	r3, #4
 8003980:	d002      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0x30>
 8003982:	2b08      	cmp	r3, #8
 8003984:	d003      	beq.n	800398e <HAL_RCC_GetSysClockFreq+0x36>
 8003986:	e026      	b.n	80039d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003988:	4b19      	ldr	r3, [pc, #100]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800398a:	613b      	str	r3, [r7, #16]
      break;
 800398c:	e026      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	0c9b      	lsrs	r3, r3, #18
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	4a17      	ldr	r2, [pc, #92]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003998:	5cd3      	ldrb	r3, [r2, r3]
 800399a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800399c:	4b13      	ldr	r3, [pc, #76]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x94>)
 800399e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	4a14      	ldr	r2, [pc, #80]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039a6:	5cd3      	ldrb	r3, [r2, r3]
 80039a8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039b4:	4a0e      	ldr	r2, [pc, #56]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	fb02 f303 	mul.w	r3, r2, r3
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	e004      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a0c      	ldr	r2, [pc, #48]	@ (80039fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	613b      	str	r3, [r7, #16]
      break;
 80039d4:	e002      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039d6:	4b06      	ldr	r3, [pc, #24]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80039d8:	613b      	str	r3, [r7, #16]
      break;
 80039da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039dc:	693b      	ldr	r3, [r7, #16]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40021000 	.word	0x40021000
 80039f0:	007a1200 	.word	0x007a1200
 80039f4:	08005a74 	.word	0x08005a74
 80039f8:	08005a84 	.word	0x08005a84
 80039fc:	003d0900 	.word	0x003d0900

08003a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a04:	4b03      	ldr	r3, [pc, #12]	@ (8003a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a06:	681b      	ldr	r3, [r3, #0]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	20000000 	.word	0x20000000

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a1e:	f7ff ffef 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8003a22:	4601      	mov	r1, r0
 8003a24:	4b0b      	ldr	r3, [pc, #44]	@ (8003a54 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a2c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003a30:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	fa92 f2a2 	rbit	r2, r2
 8003a38:	603a      	str	r2, [r7, #0]
  return result;
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	fab2 f282 	clz	r2, r2
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	40d3      	lsrs	r3, r2
 8003a44:	4a04      	ldr	r2, [pc, #16]	@ (8003a58 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a46:	5cd3      	ldrb	r3, [r2, r3]
 8003a48:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40021000 	.word	0x40021000
 8003a58:	08005a6c 	.word	0x08005a6c

08003a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a62:	f7ff ffcd 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8003a66:	4601      	mov	r1, r0
 8003a68:	4b0b      	ldr	r3, [pc, #44]	@ (8003a98 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003a70:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003a74:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	fa92 f2a2 	rbit	r2, r2
 8003a7c:	603a      	str	r2, [r7, #0]
  return result;
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	fab2 f282 	clz	r2, r2
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	40d3      	lsrs	r3, r2
 8003a88:	4a04      	ldr	r2, [pc, #16]	@ (8003a9c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a8a:	5cd3      	ldrb	r3, [r2, r3]
 8003a8c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	08005a6c 	.word	0x08005a6c

08003aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b092      	sub	sp, #72	@ 0x48
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 80cd 	beq.w	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ac4:	4b86      	ldr	r3, [pc, #536]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10e      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad0:	4b83      	ldr	r3, [pc, #524]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	4a82      	ldr	r2, [pc, #520]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ad6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ada:	61d3      	str	r3, [r2, #28]
 8003adc:	4b80      	ldr	r3, [pc, #512]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aee:	4b7d      	ldr	r3, [pc, #500]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d118      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003afa:	4b7a      	ldr	r3, [pc, #488]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a79      	ldr	r2, [pc, #484]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b04:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b06:	f7fe fa2f 	bl	8001f68 <HAL_GetTick>
 8003b0a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0c:	e008      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0e:	f7fe fa2b 	bl	8001f68 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b64      	cmp	r3, #100	@ 0x64
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e0db      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b20:	4b70      	ldr	r3, [pc, #448]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0f0      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b2c:	4b6c      	ldr	r3, [pc, #432]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d07d      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d076      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b4a:	4b65      	ldr	r3, [pc, #404]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b58:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5c:	fa93 f3a3 	rbit	r3, r3
 8003b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b64:	fab3 f383 	clz	r3, r3
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	461a      	mov	r2, r3
 8003b74:	2301      	movs	r3, #1
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b80:	fa93 f3a3 	rbit	r3, r3
 8003b84:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b88:	fab3 f383 	clz	r3, r3
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	4b55      	ldr	r3, [pc, #340]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	461a      	mov	r2, r3
 8003b98:	2300      	movs	r3, #0
 8003b9a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b9c:	4a50      	ldr	r2, [pc, #320]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d045      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bac:	f7fe f9dc 	bl	8001f68 <HAL_GetTick>
 8003bb0:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb2:	e00a      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb4:	f7fe f9d8 	bl	8001f68 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e086      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd0:	fa93 f3a3 	rbit	r3, r3
 8003bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	623b      	str	r3, [r7, #32]
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	fa93 f3a3 	rbit	r3, r3
 8003be0:	61fb      	str	r3, [r7, #28]
  return result;
 8003be2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be4:	fab3 f383 	clz	r3, r3
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f043 0302 	orr.w	r3, r3, #2
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d102      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003bf8:	4b39      	ldr	r3, [pc, #228]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	e007      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	fa93 f3a3 	rbit	r3, r3
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	4b35      	ldr	r3, [pc, #212]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0e:	2202      	movs	r2, #2
 8003c10:	613a      	str	r2, [r7, #16]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	fa92 f2a2 	rbit	r2, r2
 8003c18:	60fa      	str	r2, [r7, #12]
  return result;
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	fab2 f282 	clz	r2, r2
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	f002 021f 	and.w	r2, r2, #31
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0bd      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c38:	4b29      	ldr	r3, [pc, #164]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	4926      	ldr	r1, [pc, #152]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c4a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d105      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c52:	4b23      	ldr	r3, [pc, #140]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	4a22      	ldr	r2, [pc, #136]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c5c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6e:	f023 0203 	bic.w	r2, r3, #3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	491a      	ldr	r1, [pc, #104]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c88:	4b15      	ldr	r3, [pc, #84]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8c:	f023 0210 	bic.w	r2, r3, #16
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4912      	ldr	r1, [pc, #72]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003caa:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	490b      	ldr	r1, [pc, #44]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003cc4:	4b06      	ldr	r3, [pc, #24]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	4903      	ldr	r1, [pc, #12]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3748      	adds	r7, #72	@ 0x48
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40007000 	.word	0x40007000
 8003ce8:	10908100 	.word	0x10908100

08003cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e049      	b.n	8003d92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fd ffc8 	bl	8001ca8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3304      	adds	r3, #4
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	f000 fa88 	bl	8004240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d001      	beq.n	8003db4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e038      	b.n	8003e26 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1c      	ldr	r2, [pc, #112]	@ (8003e34 <HAL_TIM_Base_Start+0x98>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00e      	beq.n	8003de4 <HAL_TIM_Base_Start+0x48>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dce:	d009      	beq.n	8003de4 <HAL_TIM_Base_Start+0x48>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a18      	ldr	r2, [pc, #96]	@ (8003e38 <HAL_TIM_Base_Start+0x9c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <HAL_TIM_Base_Start+0x48>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a17      	ldr	r2, [pc, #92]	@ (8003e3c <HAL_TIM_Base_Start+0xa0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d115      	bne.n	8003e10 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	4b15      	ldr	r3, [pc, #84]	@ (8003e40 <HAL_TIM_Base_Start+0xa4>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b06      	cmp	r3, #6
 8003df4:	d015      	beq.n	8003e22 <HAL_TIM_Base_Start+0x86>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dfc:	d011      	beq.n	8003e22 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0201 	orr.w	r2, r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0e:	e008      	b.n	8003e22 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	e000      	b.n	8003e24 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40012c00 	.word	0x40012c00
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	40014000 	.word	0x40014000
 8003e40:	00010007 	.word	0x00010007

08003e44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d020      	beq.n	8003ea8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01b      	beq.n	8003ea8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f06f 0202 	mvn.w	r2, #2
 8003e78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f9b7 	bl	8004202 <HAL_TIM_IC_CaptureCallback>
 8003e94:	e005      	b.n	8003ea2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f9a9 	bl	80041ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f9ba 	bl	8004216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d020      	beq.n	8003ef4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d01b      	beq.n	8003ef4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0204 	mvn.w	r2, #4
 8003ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f991 	bl	8004202 <HAL_TIM_IC_CaptureCallback>
 8003ee0:	e005      	b.n	8003eee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f983 	bl	80041ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f994 	bl	8004216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d020      	beq.n	8003f40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01b      	beq.n	8003f40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0208 	mvn.w	r2, #8
 8003f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2204      	movs	r2, #4
 8003f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f96b 	bl	8004202 <HAL_TIM_IC_CaptureCallback>
 8003f2c:	e005      	b.n	8003f3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f95d 	bl	80041ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f96e 	bl	8004216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d020      	beq.n	8003f8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01b      	beq.n	8003f8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0210 	mvn.w	r2, #16
 8003f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2208      	movs	r2, #8
 8003f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f945 	bl	8004202 <HAL_TIM_IC_CaptureCallback>
 8003f78:	e005      	b.n	8003f86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f937 	bl	80041ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f948 	bl	8004216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00c      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f06f 0201 	mvn.w	r2, #1
 8003fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f915 	bl	80041da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00c      	beq.n	8003fd4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d007      	beq.n	8003fd4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 facc 	bl	800456c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00c      	beq.n	8003ff8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d007      	beq.n	8003ff8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 fac4 	bl	8004580 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00c      	beq.n	800401c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d007      	beq.n	800401c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f907 	bl	800422a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00c      	beq.n	8004040 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b00      	cmp	r3, #0
 800402e:	d007      	beq.n	8004040 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0220 	mvn.w	r2, #32
 8004038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fa8c 	bl	8004558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004040:	bf00      	nop
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_TIM_ConfigClockSource+0x1c>
 8004060:	2302      	movs	r3, #2
 8004062:	e0b6      	b.n	80041d2 <HAL_TIM_ConfigClockSource+0x18a>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004082:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800408e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040a0:	d03e      	beq.n	8004120 <HAL_TIM_ConfigClockSource+0xd8>
 80040a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040a6:	f200 8087 	bhi.w	80041b8 <HAL_TIM_ConfigClockSource+0x170>
 80040aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040ae:	f000 8086 	beq.w	80041be <HAL_TIM_ConfigClockSource+0x176>
 80040b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040b6:	d87f      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x170>
 80040b8:	2b70      	cmp	r3, #112	@ 0x70
 80040ba:	d01a      	beq.n	80040f2 <HAL_TIM_ConfigClockSource+0xaa>
 80040bc:	2b70      	cmp	r3, #112	@ 0x70
 80040be:	d87b      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x170>
 80040c0:	2b60      	cmp	r3, #96	@ 0x60
 80040c2:	d050      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0x11e>
 80040c4:	2b60      	cmp	r3, #96	@ 0x60
 80040c6:	d877      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x170>
 80040c8:	2b50      	cmp	r3, #80	@ 0x50
 80040ca:	d03c      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0xfe>
 80040cc:	2b50      	cmp	r3, #80	@ 0x50
 80040ce:	d873      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x170>
 80040d0:	2b40      	cmp	r3, #64	@ 0x40
 80040d2:	d058      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0x13e>
 80040d4:	2b40      	cmp	r3, #64	@ 0x40
 80040d6:	d86f      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x170>
 80040d8:	2b30      	cmp	r3, #48	@ 0x30
 80040da:	d064      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x15e>
 80040dc:	2b30      	cmp	r3, #48	@ 0x30
 80040de:	d86b      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x170>
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	d060      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x15e>
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d867      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x170>
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d05c      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x15e>
 80040ec:	2b10      	cmp	r3, #16
 80040ee:	d05a      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x15e>
 80040f0:	e062      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004102:	f000 f99b 	bl	800443c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004114:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	609a      	str	r2, [r3, #8]
      break;
 800411e:	e04f      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004130:	f000 f984 	bl	800443c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004142:	609a      	str	r2, [r3, #8]
      break;
 8004144:	e03c      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004152:	461a      	mov	r2, r3
 8004154:	f000 f8f8 	bl	8004348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2150      	movs	r1, #80	@ 0x50
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f951 	bl	8004406 <TIM_ITRx_SetConfig>
      break;
 8004164:	e02c      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004172:	461a      	mov	r2, r3
 8004174:	f000 f917 	bl	80043a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2160      	movs	r1, #96	@ 0x60
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f941 	bl	8004406 <TIM_ITRx_SetConfig>
      break;
 8004184:	e01c      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004192:	461a      	mov	r2, r3
 8004194:	f000 f8d8 	bl	8004348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2140      	movs	r1, #64	@ 0x40
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 f931 	bl	8004406 <TIM_ITRx_SetConfig>
      break;
 80041a4:	e00c      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4619      	mov	r1, r3
 80041b0:	4610      	mov	r0, r2
 80041b2:	f000 f928 	bl	8004406 <TIM_ITRx_SetConfig>
      break;
 80041b6:	e003      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	73fb      	strb	r3, [r7, #15]
      break;
 80041bc:	e000      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80041be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
	...

08004240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a38      	ldr	r2, [pc, #224]	@ (8004334 <TIM_Base_SetConfig+0xf4>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d007      	beq.n	8004268 <TIM_Base_SetConfig+0x28>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800425e:	d003      	beq.n	8004268 <TIM_Base_SetConfig+0x28>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a35      	ldr	r2, [pc, #212]	@ (8004338 <TIM_Base_SetConfig+0xf8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d108      	bne.n	800427a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800426e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a2d      	ldr	r2, [pc, #180]	@ (8004334 <TIM_Base_SetConfig+0xf4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d013      	beq.n	80042aa <TIM_Base_SetConfig+0x6a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004288:	d00f      	beq.n	80042aa <TIM_Base_SetConfig+0x6a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a2a      	ldr	r2, [pc, #168]	@ (8004338 <TIM_Base_SetConfig+0xf8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00b      	beq.n	80042aa <TIM_Base_SetConfig+0x6a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a29      	ldr	r2, [pc, #164]	@ (800433c <TIM_Base_SetConfig+0xfc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d007      	beq.n	80042aa <TIM_Base_SetConfig+0x6a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a28      	ldr	r2, [pc, #160]	@ (8004340 <TIM_Base_SetConfig+0x100>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d003      	beq.n	80042aa <TIM_Base_SetConfig+0x6a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a27      	ldr	r2, [pc, #156]	@ (8004344 <TIM_Base_SetConfig+0x104>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d108      	bne.n	80042bc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a14      	ldr	r2, [pc, #80]	@ (8004334 <TIM_Base_SetConfig+0xf4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00b      	beq.n	8004300 <TIM_Base_SetConfig+0xc0>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a14      	ldr	r2, [pc, #80]	@ (800433c <TIM_Base_SetConfig+0xfc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d007      	beq.n	8004300 <TIM_Base_SetConfig+0xc0>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a13      	ldr	r2, [pc, #76]	@ (8004340 <TIM_Base_SetConfig+0x100>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d003      	beq.n	8004300 <TIM_Base_SetConfig+0xc0>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a12      	ldr	r2, [pc, #72]	@ (8004344 <TIM_Base_SetConfig+0x104>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d103      	bne.n	8004308 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b01      	cmp	r3, #1
 8004318:	d105      	bne.n	8004326 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f023 0201 	bic.w	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	611a      	str	r2, [r3, #16]
  }
}
 8004326:	bf00      	nop
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40012c00 	.word	0x40012c00
 8004338:	40000400 	.word	0x40000400
 800433c:	40014000 	.word	0x40014000
 8004340:	40014400 	.word	0x40014400
 8004344:	40014800 	.word	0x40014800

08004348 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	f023 0201 	bic.w	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f023 030a 	bic.w	r3, r3, #10
 8004384:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	621a      	str	r2, [r3, #32]
}
 800439a:	bf00      	nop
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b087      	sub	sp, #28
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f023 0210 	bic.w	r2, r3, #16
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	031b      	lsls	r3, r3, #12
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	4313      	orrs	r3, r2
 80043da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	621a      	str	r2, [r3, #32]
}
 80043fa:	bf00      	nop
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004406:	b480      	push	{r7}
 8004408:	b085      	sub	sp, #20
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800441c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	f043 0307 	orr.w	r3, r3, #7
 8004428:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	609a      	str	r2, [r3, #8]
}
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004456:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	021a      	lsls	r2, r3, #8
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	431a      	orrs	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4313      	orrs	r3, r2
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	609a      	str	r2, [r3, #8]
}
 8004470:	bf00      	nop
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004490:	2302      	movs	r3, #2
 8004492:	e054      	b.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a24      	ldr	r2, [pc, #144]	@ (800454c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d108      	bne.n	80044d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80044c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a17      	ldr	r2, [pc, #92]	@ (800454c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00e      	beq.n	8004512 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044fc:	d009      	beq.n	8004512 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a13      	ldr	r2, [pc, #76]	@ (8004550 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d004      	beq.n	8004512 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a11      	ldr	r2, [pc, #68]	@ (8004554 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d10c      	bne.n	800452c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	4313      	orrs	r3, r2
 8004522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40012c00 	.word	0x40012c00
 8004550:	40000400 	.word	0x40000400
 8004554:	40014000 	.word	0x40014000

08004558 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e040      	b.n	8004628 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d106      	bne.n	80045bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fd fbb0 	bl	8001d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2224      	movs	r2, #36	@ 0x24
 80045c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0201 	bic.w	r2, r2, #1
 80045d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fd32 	bl	8005044 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 fbf9 	bl	8004dd8 <UART_SetConfig>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e01b      	b.n	8004628 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800460e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fdb1 	bl	8005188 <UART_CheckIdleState>
 8004626:	4603      	mov	r3, r0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	@ 0x28
 8004634:	af02      	add	r7, sp, #8
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	603b      	str	r3, [r7, #0]
 800463c:	4613      	mov	r3, r2
 800463e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004644:	2b20      	cmp	r3, #32
 8004646:	d177      	bne.n	8004738 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_UART_Transmit+0x24>
 800464e:	88fb      	ldrh	r3, [r7, #6]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e070      	b.n	800473a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2221      	movs	r2, #33	@ 0x21
 8004664:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004666:	f7fd fc7f 	bl	8001f68 <HAL_GetTick>
 800466a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	88fa      	ldrh	r2, [r7, #6]
 8004670:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	88fa      	ldrh	r2, [r7, #6]
 8004678:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004684:	d108      	bne.n	8004698 <HAL_UART_Transmit+0x68>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d104      	bne.n	8004698 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800468e:	2300      	movs	r3, #0
 8004690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	e003      	b.n	80046a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800469c:	2300      	movs	r3, #0
 800469e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046a0:	e02f      	b.n	8004702 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2200      	movs	r2, #0
 80046aa:	2180      	movs	r1, #128	@ 0x80
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 fe13 	bl	80052d8 <UART_WaitOnFlagUntilTimeout>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d004      	beq.n	80046c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e03b      	b.n	800473a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10b      	bne.n	80046e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	881a      	ldrh	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046d4:	b292      	uxth	r2, r2
 80046d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	3302      	adds	r3, #2
 80046dc:	61bb      	str	r3, [r7, #24]
 80046de:	e007      	b.n	80046f0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	781a      	ldrb	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	3301      	adds	r3, #1
 80046ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1c9      	bne.n	80046a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2200      	movs	r2, #0
 8004716:	2140      	movs	r1, #64	@ 0x40
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 fddd 	bl	80052d8 <UART_WaitOnFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2220      	movs	r2, #32
 8004728:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e005      	b.n	800473a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2220      	movs	r2, #32
 8004732:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004738:	2302      	movs	r3, #2
  }
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b08a      	sub	sp, #40	@ 0x28
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	4613      	mov	r3, r2
 800474e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004756:	2b20      	cmp	r3, #32
 8004758:	d132      	bne.n	80047c0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <HAL_UART_Receive_IT+0x24>
 8004760:	88fb      	ldrh	r3, [r7, #6]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e02b      	b.n	80047c2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d018      	beq.n	80047b0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	e853 3f00 	ldrex	r3, [r3]
 800478a:	613b      	str	r3, [r7, #16]
   return(result);
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004792:	627b      	str	r3, [r7, #36]	@ 0x24
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	623b      	str	r3, [r7, #32]
 800479e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	69f9      	ldr	r1, [r7, #28]
 80047a2:	6a3a      	ldr	r2, [r7, #32]
 80047a4:	e841 2300 	strex	r3, r2, [r1]
 80047a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e6      	bne.n	800477e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	461a      	mov	r2, r3
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fdfc 	bl	80053b4 <UART_Start_Receive_IT>
 80047bc:	4603      	mov	r3, r0
 80047be:	e000      	b.n	80047c2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80047c0:	2302      	movs	r3, #2
  }
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3728      	adds	r7, #40	@ 0x28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b0ba      	sub	sp, #232	@ 0xe8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80047f6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80047fa:	4013      	ands	r3, r2
 80047fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004804:	2b00      	cmp	r3, #0
 8004806:	d115      	bne.n	8004834 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00f      	beq.n	8004834 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b00      	cmp	r3, #0
 800481e:	d009      	beq.n	8004834 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 82ab 	beq.w	8004d80 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4798      	blx	r3
      }
      return;
 8004832:	e2a5      	b.n	8004d80 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004834:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 8117 	beq.w	8004a6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800483e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800484a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800484e:	4b85      	ldr	r3, [pc, #532]	@ (8004a64 <HAL_UART_IRQHandler+0x298>)
 8004850:	4013      	ands	r3, r2
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 810a 	beq.w	8004a6c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d011      	beq.n	8004888 <HAL_UART_IRQHandler+0xbc>
 8004864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00b      	beq.n	8004888 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2201      	movs	r2, #1
 8004876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800487e:	f043 0201 	orr.w	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d011      	beq.n	80048b8 <HAL_UART_IRQHandler+0xec>
 8004894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00b      	beq.n	80048b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2202      	movs	r2, #2
 80048a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048ae:	f043 0204 	orr.w	r2, r3, #4
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d011      	beq.n	80048e8 <HAL_UART_IRQHandler+0x11c>
 80048c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2204      	movs	r2, #4
 80048d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048de:	f043 0202 	orr.w	r2, r3, #2
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d017      	beq.n	8004924 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d105      	bne.n	800490c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004904:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00b      	beq.n	8004924 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2208      	movs	r2, #8
 8004912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800491a:	f043 0208 	orr.w	r2, r3, #8
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004928:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800492c:	2b00      	cmp	r3, #0
 800492e:	d012      	beq.n	8004956 <HAL_UART_IRQHandler+0x18a>
 8004930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004934:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00c      	beq.n	8004956 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004944:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800494c:	f043 0220 	orr.w	r2, r3, #32
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 8211 	beq.w	8004d84 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00d      	beq.n	800498a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800496e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004990:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800499e:	2b40      	cmp	r3, #64	@ 0x40
 80049a0:	d005      	beq.n	80049ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d04f      	beq.n	8004a4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fdc6 	bl	8005540 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049be:	2b40      	cmp	r3, #64	@ 0x40
 80049c0:	d141      	bne.n	8004a46 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3308      	adds	r3, #8
 80049c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3308      	adds	r3, #8
 80049ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1d9      	bne.n	80049c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d013      	beq.n	8004a3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a1a:	4a13      	ldr	r2, [pc, #76]	@ (8004a68 <HAL_UART_IRQHandler+0x29c>)
 8004a1c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fd fbfb 	bl	800221e <HAL_DMA_Abort_IT>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d017      	beq.n	8004a5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a3c:	e00f      	b.n	8004a5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f9b4 	bl	8004dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a44:	e00b      	b.n	8004a5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f9b0 	bl	8004dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4c:	e007      	b.n	8004a5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f9ac 	bl	8004dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004a5c:	e192      	b.n	8004d84 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5e:	bf00      	nop
    return;
 8004a60:	e190      	b.n	8004d84 <HAL_UART_IRQHandler+0x5b8>
 8004a62:	bf00      	nop
 8004a64:	04000120 	.word	0x04000120
 8004a68:	08005609 	.word	0x08005609

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	f040 814b 	bne.w	8004d0c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a7a:	f003 0310 	and.w	r3, r3, #16
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 8144 	beq.w	8004d0c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a88:	f003 0310 	and.w	r3, r3, #16
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 813d 	beq.w	8004d0c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2210      	movs	r2, #16
 8004a98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa4:	2b40      	cmp	r3, #64	@ 0x40
 8004aa6:	f040 80b5 	bne.w	8004c14 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ab6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 8164 	beq.w	8004d88 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ac6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aca:	429a      	cmp	r2, r3
 8004acc:	f080 815c 	bcs.w	8004d88 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ad6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	2b20      	cmp	r3, #32
 8004ae2:	f000 8086 	beq.w	8004bf2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004af2:	e853 3f00 	ldrex	r3, [r3]
 8004af6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004afa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004afe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b14:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b18:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1da      	bne.n	8004ae6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3308      	adds	r3, #8
 8004b36:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b3a:	e853 3f00 	ldrex	r3, [r3]
 8004b3e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b42:	f023 0301 	bic.w	r3, r3, #1
 8004b46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3308      	adds	r3, #8
 8004b50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b54:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b58:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e1      	bne.n	8004b30 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3308      	adds	r3, #8
 8004b72:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b76:	e853 3f00 	ldrex	r3, [r3]
 8004b7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b90:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b92:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b96:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b98:	e841 2300 	strex	r3, r2, [r1]
 8004b9c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e3      	bne.n	8004b6c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004bc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bc2:	f023 0310 	bic.w	r3, r3, #16
 8004bc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bd6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e4      	bne.n	8004bb2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fd fad8 	bl	80021a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f8d7 	bl	8004dc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c12:	e0b9      	b.n	8004d88 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 80ab 	beq.w	8004d8c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004c36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 80a6 	beq.w	8004d8c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c62:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c64:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e4      	bne.n	8004c40 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c80:	e853 3f00 	ldrex	r3, [r3]
 8004c84:	623b      	str	r3, [r7, #32]
   return(result);
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	f023 0301 	bic.w	r3, r3, #1
 8004c8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3308      	adds	r3, #8
 8004c96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ca2:	e841 2300 	strex	r3, r2, [r1]
 8004ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1e3      	bne.n	8004c76 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0310 	bic.w	r3, r3, #16
 8004cd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce8:	69b9      	ldr	r1, [r7, #24]
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	e841 2300 	strex	r3, r2, [r1]
 8004cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e4      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d02:	4619      	mov	r1, r3
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f85b 	bl	8004dc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d0a:	e03f      	b.n	8004d8c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00e      	beq.n	8004d36 <HAL_UART_IRQHandler+0x56a>
 8004d18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d008      	beq.n	8004d36 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004d2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fe52 	bl	80059d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d34:	e02d      	b.n	8004d92 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00e      	beq.n	8004d60 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d008      	beq.n	8004d60 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d01c      	beq.n	8004d90 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	4798      	blx	r3
    }
    return;
 8004d5e:	e017      	b.n	8004d90 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d012      	beq.n	8004d92 <HAL_UART_IRQHandler+0x5c6>
 8004d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00c      	beq.n	8004d92 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fc5b 	bl	8005634 <UART_EndTransmit_IT>
    return;
 8004d7e:	e008      	b.n	8004d92 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004d80:	bf00      	nop
 8004d82:	e006      	b.n	8004d92 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004d84:	bf00      	nop
 8004d86:	e004      	b.n	8004d92 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004d88:	bf00      	nop
 8004d8a:	e002      	b.n	8004d92 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004d8c:	bf00      	nop
 8004d8e:	e000      	b.n	8004d92 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004d90:	bf00      	nop
  }

}
 8004d92:	37e8      	adds	r7, #232	@ 0xe8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	4b8a      	ldr	r3, [pc, #552]	@ (800502c <UART_SetConfig+0x254>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	6979      	ldr	r1, [r7, #20]
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a78      	ldr	r2, [pc, #480]	@ (8005030 <UART_SetConfig+0x258>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d120      	bne.n	8004e96 <UART_SetConfig+0xbe>
 8004e54:	4b77      	ldr	r3, [pc, #476]	@ (8005034 <UART_SetConfig+0x25c>)
 8004e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e58:	f003 0303 	and.w	r3, r3, #3
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	d817      	bhi.n	8004e90 <UART_SetConfig+0xb8>
 8004e60:	a201      	add	r2, pc, #4	@ (adr r2, 8004e68 <UART_SetConfig+0x90>)
 8004e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e66:	bf00      	nop
 8004e68:	08004e79 	.word	0x08004e79
 8004e6c:	08004e85 	.word	0x08004e85
 8004e70:	08004e8b 	.word	0x08004e8b
 8004e74:	08004e7f 	.word	0x08004e7f
 8004e78:	2300      	movs	r3, #0
 8004e7a:	77fb      	strb	r3, [r7, #31]
 8004e7c:	e01d      	b.n	8004eba <UART_SetConfig+0xe2>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	77fb      	strb	r3, [r7, #31]
 8004e82:	e01a      	b.n	8004eba <UART_SetConfig+0xe2>
 8004e84:	2304      	movs	r3, #4
 8004e86:	77fb      	strb	r3, [r7, #31]
 8004e88:	e017      	b.n	8004eba <UART_SetConfig+0xe2>
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	77fb      	strb	r3, [r7, #31]
 8004e8e:	e014      	b.n	8004eba <UART_SetConfig+0xe2>
 8004e90:	2310      	movs	r3, #16
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e011      	b.n	8004eba <UART_SetConfig+0xe2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a67      	ldr	r2, [pc, #412]	@ (8005038 <UART_SetConfig+0x260>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d102      	bne.n	8004ea6 <UART_SetConfig+0xce>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	77fb      	strb	r3, [r7, #31]
 8004ea4:	e009      	b.n	8004eba <UART_SetConfig+0xe2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a64      	ldr	r2, [pc, #400]	@ (800503c <UART_SetConfig+0x264>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d102      	bne.n	8004eb6 <UART_SetConfig+0xde>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	77fb      	strb	r3, [r7, #31]
 8004eb4:	e001      	b.n	8004eba <UART_SetConfig+0xe2>
 8004eb6:	2310      	movs	r3, #16
 8004eb8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ec2:	d15a      	bne.n	8004f7a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004ec4:	7ffb      	ldrb	r3, [r7, #31]
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d827      	bhi.n	8004f1a <UART_SetConfig+0x142>
 8004eca:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed0 <UART_SetConfig+0xf8>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004ef5 	.word	0x08004ef5
 8004ed4:	08004efd 	.word	0x08004efd
 8004ed8:	08004f05 	.word	0x08004f05
 8004edc:	08004f1b 	.word	0x08004f1b
 8004ee0:	08004f0b 	.word	0x08004f0b
 8004ee4:	08004f1b 	.word	0x08004f1b
 8004ee8:	08004f1b 	.word	0x08004f1b
 8004eec:	08004f1b 	.word	0x08004f1b
 8004ef0:	08004f13 	.word	0x08004f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef4:	f7fe fd90 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8004ef8:	61b8      	str	r0, [r7, #24]
        break;
 8004efa:	e013      	b.n	8004f24 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004efc:	f7fe fdae 	bl	8003a5c <HAL_RCC_GetPCLK2Freq>
 8004f00:	61b8      	str	r0, [r7, #24]
        break;
 8004f02:	e00f      	b.n	8004f24 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f04:	4b4e      	ldr	r3, [pc, #312]	@ (8005040 <UART_SetConfig+0x268>)
 8004f06:	61bb      	str	r3, [r7, #24]
        break;
 8004f08:	e00c      	b.n	8004f24 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f0a:	f7fe fd25 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8004f0e:	61b8      	str	r0, [r7, #24]
        break;
 8004f10:	e008      	b.n	8004f24 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f16:	61bb      	str	r3, [r7, #24]
        break;
 8004f18:	e004      	b.n	8004f24 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	77bb      	strb	r3, [r7, #30]
        break;
 8004f22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d074      	beq.n	8005014 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	005a      	lsls	r2, r3, #1
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	441a      	add	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	2b0f      	cmp	r3, #15
 8004f44:	d916      	bls.n	8004f74 <UART_SetConfig+0x19c>
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f4c:	d212      	bcs.n	8004f74 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	f023 030f 	bic.w	r3, r3, #15
 8004f56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	085b      	lsrs	r3, r3, #1
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	89fb      	ldrh	r3, [r7, #14]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	89fa      	ldrh	r2, [r7, #14]
 8004f70:	60da      	str	r2, [r3, #12]
 8004f72:	e04f      	b.n	8005014 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	77bb      	strb	r3, [r7, #30]
 8004f78:	e04c      	b.n	8005014 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f7a:	7ffb      	ldrb	r3, [r7, #31]
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d828      	bhi.n	8004fd2 <UART_SetConfig+0x1fa>
 8004f80:	a201      	add	r2, pc, #4	@ (adr r2, 8004f88 <UART_SetConfig+0x1b0>)
 8004f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f86:	bf00      	nop
 8004f88:	08004fad 	.word	0x08004fad
 8004f8c:	08004fb5 	.word	0x08004fb5
 8004f90:	08004fbd 	.word	0x08004fbd
 8004f94:	08004fd3 	.word	0x08004fd3
 8004f98:	08004fc3 	.word	0x08004fc3
 8004f9c:	08004fd3 	.word	0x08004fd3
 8004fa0:	08004fd3 	.word	0x08004fd3
 8004fa4:	08004fd3 	.word	0x08004fd3
 8004fa8:	08004fcb 	.word	0x08004fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fac:	f7fe fd34 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8004fb0:	61b8      	str	r0, [r7, #24]
        break;
 8004fb2:	e013      	b.n	8004fdc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fb4:	f7fe fd52 	bl	8003a5c <HAL_RCC_GetPCLK2Freq>
 8004fb8:	61b8      	str	r0, [r7, #24]
        break;
 8004fba:	e00f      	b.n	8004fdc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fbc:	4b20      	ldr	r3, [pc, #128]	@ (8005040 <UART_SetConfig+0x268>)
 8004fbe:	61bb      	str	r3, [r7, #24]
        break;
 8004fc0:	e00c      	b.n	8004fdc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fc2:	f7fe fcc9 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8004fc6:	61b8      	str	r0, [r7, #24]
        break;
 8004fc8:	e008      	b.n	8004fdc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fce:	61bb      	str	r3, [r7, #24]
        break;
 8004fd0:	e004      	b.n	8004fdc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	77bb      	strb	r3, [r7, #30]
        break;
 8004fda:	bf00      	nop
    }

    if (pclk != 0U)
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d018      	beq.n	8005014 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	085a      	lsrs	r2, r3, #1
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	441a      	add	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	2b0f      	cmp	r3, #15
 8004ffa:	d909      	bls.n	8005010 <UART_SetConfig+0x238>
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005002:	d205      	bcs.n	8005010 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	b29a      	uxth	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	60da      	str	r2, [r3, #12]
 800500e:	e001      	b.n	8005014 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005020:	7fbb      	ldrb	r3, [r7, #30]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3720      	adds	r7, #32
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	efff69f3 	.word	0xefff69f3
 8005030:	40013800 	.word	0x40013800
 8005034:	40021000 	.word	0x40021000
 8005038:	40004400 	.word	0x40004400
 800503c:	40004800 	.word	0x40004800
 8005040:	007a1200 	.word	0x007a1200

08005044 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	f003 0308 	and.w	r3, r3, #8
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00a      	beq.n	80050f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01a      	beq.n	800515a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005142:	d10a      	bne.n	800515a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	605a      	str	r2, [r3, #4]
  }
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b098      	sub	sp, #96	@ 0x60
 800518c:	af02      	add	r7, sp, #8
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005198:	f7fc fee6 	bl	8001f68 <HAL_GetTick>
 800519c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d12e      	bne.n	800520a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051b4:	2200      	movs	r2, #0
 80051b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f88c 	bl	80052d8 <UART_WaitOnFlagUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d021      	beq.n	800520a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ce:	e853 3f00 	ldrex	r3, [r3]
 80051d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051da:	653b      	str	r3, [r7, #80]	@ 0x50
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	461a      	mov	r2, r3
 80051e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80051e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051ec:	e841 2300 	strex	r3, r2, [r1]
 80051f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e6      	bne.n	80051c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e062      	b.n	80052d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b04      	cmp	r3, #4
 8005216:	d149      	bne.n	80052ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005218:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005220:	2200      	movs	r2, #0
 8005222:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f856 	bl	80052d8 <UART_WaitOnFlagUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d03c      	beq.n	80052ac <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523a:	e853 3f00 	ldrex	r3, [r3]
 800523e:	623b      	str	r3, [r7, #32]
   return(result);
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005250:	633b      	str	r3, [r7, #48]	@ 0x30
 8005252:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005254:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005258:	e841 2300 	strex	r3, r2, [r1]
 800525c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800525e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1e6      	bne.n	8005232 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3308      	adds	r3, #8
 800526a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	e853 3f00 	ldrex	r3, [r3]
 8005272:	60fb      	str	r3, [r7, #12]
   return(result);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0301 	bic.w	r3, r3, #1
 800527a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3308      	adds	r3, #8
 8005282:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005284:	61fa      	str	r2, [r7, #28]
 8005286:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005288:	69b9      	ldr	r1, [r7, #24]
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	e841 2300 	strex	r3, r2, [r1]
 8005290:	617b      	str	r3, [r7, #20]
   return(result);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1e5      	bne.n	8005264 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2220      	movs	r2, #32
 800529c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e011      	b.n	80052d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3758      	adds	r7, #88	@ 0x58
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	4613      	mov	r3, r2
 80052e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e8:	e04f      	b.n	800538a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f0:	d04b      	beq.n	800538a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f2:	f7fc fe39 	bl	8001f68 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d302      	bcc.n	8005308 <UART_WaitOnFlagUntilTimeout+0x30>
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e04e      	b.n	80053aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0304 	and.w	r3, r3, #4
 8005316:	2b00      	cmp	r3, #0
 8005318:	d037      	beq.n	800538a <UART_WaitOnFlagUntilTimeout+0xb2>
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2b80      	cmp	r3, #128	@ 0x80
 800531e:	d034      	beq.n	800538a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2b40      	cmp	r3, #64	@ 0x40
 8005324:	d031      	beq.n	800538a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	2b08      	cmp	r3, #8
 8005332:	d110      	bne.n	8005356 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2208      	movs	r2, #8
 800533a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 f8ff 	bl	8005540 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2208      	movs	r2, #8
 8005346:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e029      	b.n	80053aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005360:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005364:	d111      	bne.n	800538a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800536e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 f8e5 	bl	8005540 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2220      	movs	r2, #32
 800537a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e00f      	b.n	80053aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4013      	ands	r3, r2
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	429a      	cmp	r2, r3
 8005398:	bf0c      	ite	eq
 800539a:	2301      	moveq	r3, #1
 800539c:	2300      	movne	r3, #0
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d0a0      	beq.n	80052ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b097      	sub	sp, #92	@ 0x5c
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	4613      	mov	r3, r2
 80053c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	88fa      	ldrh	r2, [r7, #6]
 80053cc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	88fa      	ldrh	r2, [r7, #6]
 80053d4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053e6:	d10e      	bne.n	8005406 <UART_Start_Receive_IT+0x52>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d105      	bne.n	80053fc <UART_Start_Receive_IT+0x48>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80053f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80053fa:	e02d      	b.n	8005458 <UART_Start_Receive_IT+0xa4>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	22ff      	movs	r2, #255	@ 0xff
 8005400:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005404:	e028      	b.n	8005458 <UART_Start_Receive_IT+0xa4>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10d      	bne.n	800542a <UART_Start_Receive_IT+0x76>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d104      	bne.n	8005420 <UART_Start_Receive_IT+0x6c>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	22ff      	movs	r2, #255	@ 0xff
 800541a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800541e:	e01b      	b.n	8005458 <UART_Start_Receive_IT+0xa4>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	227f      	movs	r2, #127	@ 0x7f
 8005424:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005428:	e016      	b.n	8005458 <UART_Start_Receive_IT+0xa4>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005432:	d10d      	bne.n	8005450 <UART_Start_Receive_IT+0x9c>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d104      	bne.n	8005446 <UART_Start_Receive_IT+0x92>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	227f      	movs	r2, #127	@ 0x7f
 8005440:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005444:	e008      	b.n	8005458 <UART_Start_Receive_IT+0xa4>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	223f      	movs	r2, #63	@ 0x3f
 800544a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800544e:	e003      	b.n	8005458 <UART_Start_Receive_IT+0xa4>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2222      	movs	r2, #34	@ 0x22
 8005464:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3308      	adds	r3, #8
 800546e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3308      	adds	r3, #8
 8005486:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005488:	64ba      	str	r2, [r7, #72]	@ 0x48
 800548a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800548e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e5      	bne.n	8005468 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054a4:	d107      	bne.n	80054b6 <UART_Start_Receive_IT+0x102>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d103      	bne.n	80054b6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4a21      	ldr	r2, [pc, #132]	@ (8005538 <UART_Start_Receive_IT+0x184>)
 80054b2:	669a      	str	r2, [r3, #104]	@ 0x68
 80054b4:	e002      	b.n	80054bc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4a20      	ldr	r2, [pc, #128]	@ (800553c <UART_Start_Receive_IT+0x188>)
 80054ba:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d019      	beq.n	80054f8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80054d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80054e4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80054e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80054f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1e6      	bne.n	80054c4 <UART_Start_Receive_IT+0x110>
 80054f6:	e018      	b.n	800552a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	613b      	str	r3, [r7, #16]
   return(result);
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f043 0320 	orr.w	r3, r3, #32
 800550c:	653b      	str	r3, [r7, #80]	@ 0x50
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005516:	623b      	str	r3, [r7, #32]
 8005518:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	69f9      	ldr	r1, [r7, #28]
 800551c:	6a3a      	ldr	r2, [r7, #32]
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	61bb      	str	r3, [r7, #24]
   return(result);
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1e6      	bne.n	80054f8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	375c      	adds	r7, #92	@ 0x5c
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	08005831 	.word	0x08005831
 800553c:	08005689 	.word	0x08005689

08005540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005540:	b480      	push	{r7}
 8005542:	b095      	sub	sp, #84	@ 0x54
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005558:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800555c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005566:	643b      	str	r3, [r7, #64]	@ 0x40
 8005568:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800556c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e6      	bne.n	8005548 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3308      	adds	r3, #8
 8005580:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	61fb      	str	r3, [r7, #28]
   return(result);
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	f023 0301 	bic.w	r3, r3, #1
 8005590:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3308      	adds	r3, #8
 8005598:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800559a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800559c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e5      	bne.n	800557a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d118      	bne.n	80055e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f023 0310 	bic.w	r3, r3, #16
 80055ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	461a      	mov	r2, r3
 80055d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055d4:	61bb      	str	r3, [r7, #24]
 80055d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d8:	6979      	ldr	r1, [r7, #20]
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	e841 2300 	strex	r3, r2, [r1]
 80055e0:	613b      	str	r3, [r7, #16]
   return(result);
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e6      	bne.n	80055b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80055fc:	bf00      	nop
 80055fe:	3754      	adds	r7, #84	@ 0x54
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005614:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f7ff fbc0 	bl	8004dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800562c:	bf00      	nop
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	e853 3f00 	ldrex	r3, [r3]
 8005648:	60bb      	str	r3, [r7, #8]
   return(result);
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005650:	61fb      	str	r3, [r7, #28]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	461a      	mov	r2, r3
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	61bb      	str	r3, [r7, #24]
 800565c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565e:	6979      	ldr	r1, [r7, #20]
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	e841 2300 	strex	r3, r2, [r1]
 8005666:	613b      	str	r3, [r7, #16]
   return(result);
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1e6      	bne.n	800563c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7ff fb8c 	bl	8004d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005680:	bf00      	nop
 8005682:	3720      	adds	r7, #32
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b09c      	sub	sp, #112	@ 0x70
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005696:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056a0:	2b22      	cmp	r3, #34	@ 0x22
 80056a2:	f040 80b9 	bne.w	8005818 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80056ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80056b4:	b2d9      	uxtb	r1, r3
 80056b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c0:	400a      	ands	r2, r1
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f040 809c 	bne.w	8005828 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80056fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005700:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005704:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800570e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005710:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005714:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800571c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e6      	bne.n	80056f0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3308      	adds	r3, #8
 8005728:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005734:	f023 0301 	bic.w	r3, r3, #1
 8005738:	667b      	str	r3, [r7, #100]	@ 0x64
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3308      	adds	r3, #8
 8005740:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005742:	647a      	str	r2, [r7, #68]	@ 0x44
 8005744:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005746:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005748:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e5      	bne.n	8005722 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d018      	beq.n	80057aa <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005780:	e853 3f00 	ldrex	r3, [r3]
 8005784:	623b      	str	r3, [r7, #32]
   return(result);
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800578c:	663b      	str	r3, [r7, #96]	@ 0x60
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005796:	633b      	str	r3, [r7, #48]	@ 0x30
 8005798:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800579c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800579e:	e841 2300 	strex	r3, r2, [r1]
 80057a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1e6      	bne.n	8005778 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d12e      	bne.n	8005810 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f023 0310 	bic.w	r3, r3, #16
 80057cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057d6:	61fb      	str	r3, [r7, #28]
 80057d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	69b9      	ldr	r1, [r7, #24]
 80057dc:	69fa      	ldr	r2, [r7, #28]
 80057de:	e841 2300 	strex	r3, r2, [r1]
 80057e2:	617b      	str	r3, [r7, #20]
   return(result);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1e6      	bne.n	80057b8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	f003 0310 	and.w	r3, r3, #16
 80057f4:	2b10      	cmp	r3, #16
 80057f6:	d103      	bne.n	8005800 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2210      	movs	r2, #16
 80057fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005806:	4619      	mov	r1, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff fad9 	bl	8004dc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800580e:	e00b      	b.n	8005828 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7fb ff6b 	bl	80016ec <HAL_UART_RxCpltCallback>
}
 8005816:	e007      	b.n	8005828 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0208 	orr.w	r2, r2, #8
 8005826:	619a      	str	r2, [r3, #24]
}
 8005828:	bf00      	nop
 800582a:	3770      	adds	r7, #112	@ 0x70
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b09c      	sub	sp, #112	@ 0x70
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800583e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005848:	2b22      	cmp	r3, #34	@ 0x22
 800584a:	f040 80b9 	bne.w	80059c0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005854:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800585c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800585e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005862:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005866:	4013      	ands	r3, r2
 8005868:	b29a      	uxth	r2, r3
 800586a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800586c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005872:	1c9a      	adds	r2, r3, #2
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800587e:	b29b      	uxth	r3, r3
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	f040 809c 	bne.w	80059d0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80058a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80058b8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80058bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80058c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e6      	bne.n	8005898 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3308      	adds	r3, #8
 80058d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058dc:	f023 0301 	bic.w	r3, r3, #1
 80058e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	3308      	adds	r3, #8
 80058e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80058ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80058ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058f2:	e841 2300 	strex	r3, r2, [r1]
 80058f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1e5      	bne.n	80058ca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2220      	movs	r2, #32
 8005902:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d018      	beq.n	8005952 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	61fb      	str	r3, [r7, #28]
   return(result);
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005934:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800593e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005940:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005942:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005944:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005946:	e841 2300 	strex	r3, r2, [r1]
 800594a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800594c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1e6      	bne.n	8005920 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005956:	2b01      	cmp	r3, #1
 8005958:	d12e      	bne.n	80059b8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	60bb      	str	r3, [r7, #8]
   return(result);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f023 0310 	bic.w	r3, r3, #16
 8005974:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	461a      	mov	r2, r3
 800597c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800597e:	61bb      	str	r3, [r7, #24]
 8005980:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005982:	6979      	ldr	r1, [r7, #20]
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	e841 2300 	strex	r3, r2, [r1]
 800598a:	613b      	str	r3, [r7, #16]
   return(result);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1e6      	bne.n	8005960 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	f003 0310 	and.w	r3, r3, #16
 800599c:	2b10      	cmp	r3, #16
 800599e:	d103      	bne.n	80059a8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2210      	movs	r2, #16
 80059a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80059ae:	4619      	mov	r1, r3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7ff fa05 	bl	8004dc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059b6:	e00b      	b.n	80059d0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7fb fe97 	bl	80016ec <HAL_UART_RxCpltCallback>
}
 80059be:	e007      	b.n	80059d0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0208 	orr.w	r2, r2, #8
 80059ce:	619a      	str	r2, [r3, #24]
}
 80059d0:	bf00      	nop
 80059d2:	3770      	adds	r7, #112	@ 0x70
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <memset>:
 80059ec:	4402      	add	r2, r0
 80059ee:	4603      	mov	r3, r0
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d100      	bne.n	80059f6 <memset+0xa>
 80059f4:	4770      	bx	lr
 80059f6:	f803 1b01 	strb.w	r1, [r3], #1
 80059fa:	e7f9      	b.n	80059f0 <memset+0x4>

080059fc <__libc_init_array>:
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	4d0d      	ldr	r5, [pc, #52]	@ (8005a34 <__libc_init_array+0x38>)
 8005a00:	4c0d      	ldr	r4, [pc, #52]	@ (8005a38 <__libc_init_array+0x3c>)
 8005a02:	1b64      	subs	r4, r4, r5
 8005a04:	10a4      	asrs	r4, r4, #2
 8005a06:	2600      	movs	r6, #0
 8005a08:	42a6      	cmp	r6, r4
 8005a0a:	d109      	bne.n	8005a20 <__libc_init_array+0x24>
 8005a0c:	4d0b      	ldr	r5, [pc, #44]	@ (8005a3c <__libc_init_array+0x40>)
 8005a0e:	4c0c      	ldr	r4, [pc, #48]	@ (8005a40 <__libc_init_array+0x44>)
 8005a10:	f000 f818 	bl	8005a44 <_init>
 8005a14:	1b64      	subs	r4, r4, r5
 8005a16:	10a4      	asrs	r4, r4, #2
 8005a18:	2600      	movs	r6, #0
 8005a1a:	42a6      	cmp	r6, r4
 8005a1c:	d105      	bne.n	8005a2a <__libc_init_array+0x2e>
 8005a1e:	bd70      	pop	{r4, r5, r6, pc}
 8005a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a24:	4798      	blx	r3
 8005a26:	3601      	adds	r6, #1
 8005a28:	e7ee      	b.n	8005a08 <__libc_init_array+0xc>
 8005a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a2e:	4798      	blx	r3
 8005a30:	3601      	adds	r6, #1
 8005a32:	e7f2      	b.n	8005a1a <__libc_init_array+0x1e>
 8005a34:	08005a94 	.word	0x08005a94
 8005a38:	08005a94 	.word	0x08005a94
 8005a3c:	08005a94 	.word	0x08005a94
 8005a40:	08005a98 	.word	0x08005a98

08005a44 <_init>:
 8005a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a46:	bf00      	nop
 8005a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a4a:	bc08      	pop	{r3}
 8005a4c:	469e      	mov	lr, r3
 8005a4e:	4770      	bx	lr

08005a50 <_fini>:
 8005a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a52:	bf00      	nop
 8005a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a56:	bc08      	pop	{r3}
 8005a58:	469e      	mov	lr, r3
 8005a5a:	4770      	bx	lr
